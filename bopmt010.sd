%%          
Screen
        Name = "BOPMT010";
        Type = "Detail" ;
        Highlight=Underscore ;
        Padcharacter=Space ;
        Screensize="dynamic";
        Windowtitle="%a     %s Rating Information - Ver. 7.00     %m";
        Domain="BOPGENERAL" ;
--      resizeable = yes ;
        iconline = 0 ;

/*
  Date Written

  SCIPS.com

  Modify
  Date      by      Comments
________________________________________________________________________________
11/03/2000  dap     This screen is created for rating MSO. MSO rating is different
                    from ISO. There is 2 separate libraries bopisolib bopmsolib.
================================================================================
*/

        Global String G_LIB[10] ;

        Global Unsigned Ascii Number G_POLICY_NO[9] ;
        Global Unsigned Ascii Number G_YEAR[4] ;
        Global Unsigned Ascii Number G_END_SEQUENCE[4] ;
        Global Unsigned Ascii Number G_QUOTE_NO[8] ;
        Global Unsigned Ascii Number G_PREM_NO[4] ;
        Global Unsigned Ascii Number G_BUILD_NO[4] ;
        Global Unsigned Ascii Number G_NEW_QUOTE_NO[8] ;
        Global Unsigned Ascii Number G_LINE_OF_BUSINESS[4] ;
        Global Unsigned Ascii Number G_CHECK_REFERENCE[7] ;
        Global Unsigned Ascii Number G_AGENT_NO[4] ;
        global unsigned ascii number g_opt[2];

        Global String G_COMPANY[10] ,
                      G_COMPANY_ID[10] ,
                      g_function[10] ,
                      g_first[1] ,
                      g_first_1[1] ;

        Global Mmddyyyy Date G_STARTING_DATE,
                             G_ENDING_DATE,
                             G_EFF_DATE,
                             G_EXP_DATE;

        Global String G_LIB_1[10] ;
        global string g_name[50];
        global string g_inquiry[1] ;

        global signed ascii number g_final_total[8],
                                   g_total[8],
                                   g_terrorism[8],
                                   g_surcharge[8] ,
                                   g_boiler[8],
                                   g_territory[8],
                                   g_irpm[8],
                                   g_amt_due[8] ,
                                   g_billed_premium[8]/dec=2,
                                   g_unbilled_premium[8]/dec=2 ;

        global unsigned ascii number G_LOSS_INCOME_FACTOR[4]/decimals=3 ,
                                     g_state[2] ;

        global string g_rerate[1] ,
                      g_que[10] ;


        global unsigned ascii number g_form[1] ;

        Local Unsigned Ascii Number L_SUB_CODE[4] ,
                                    L_STATE[2],
                                    l_zipcode[9]=0,
                                    l_percent[4],
                                    l_prem_no[4]=0,
                                    l_Build_no[4]=0,
                                    l_off_premises_limit[8]=0,
                                    l_exclude_terrorism[1]=0,
                                    l_mcp140_limit[8],
                                    l_minimum_limit[8],
                                    l_maximum_limit[8],
                                    l_building_minimum_limit[8],
                                    l_contents_minimum_limit[8],
                                    l_combined_minimum_limit[8],
                                    l_building_maximum_limit[8],
                                    l_contents_maximum_limit[8],
                                    l_combined_maximum_limit[8],
                                    l_building_binding_limit[8],
                                    l_contents_binding_limit[8],
                                    l_combined_binding_limit[8],
                                    l_min_error[1],
                                    l_max_error[1],
                                    l_binding_error[1],
                                    l_combined_limit[8]=0,
                                    l_territory[3],
                                    l_group_1[5]=0/dec=3,
                                    l_group_2[5]=0/dec=3,
                                    l_mm[2],
                                    l_signs_limit[5],
                                    l_valuable_papers_limit[5],
                                    l_water_limit[5],
                                    l_credit_card_limit[5],
                                    l_dd[2],
                                    l_yy[4],
                                    l_rating_territory_group_1[1],
                                    l_rating_territory_group_2[1],
                                    l_rating_territory_group_3[1],
                                    L_CLASS_CODE[5],
                                    L_PROPERTY_LIMIT[8]=0,
                                    l_property_limit_1[8]=0,
                                    L_LINE_OF_BUSINESS[2] ,
                                    L_AR_LIMIT[8],
                                    L_COMPUTER_LIMIT[8],
                                    l_computer_limit_1[8],
                                    l_computer_limit_2[8],
                                    l_csexec_number[12],
                                    i_csexec_number[12],
                                    l_abort_program[1],
                                    L_UTILITY_LIMIT[8],
                                    L_MECHANICAL_LIMIT[8],
                                    L_EXTERIOR_SIGNS_LIMIT[8],
                                    L_EMPLOYEE_LIMIT[8],
                                    L_GLASS_LIMIT[8],
                                    L_SEWER_LIMIT[8],
                                    L_RESTAURANT[1] ,
                                    L_VALUABLE_LIMIT[8],
                                    L_FORM[1] ,
                                    l_special_enhancement[1],
                                    l_form_1[1] ;

        Local String L_DESC[50] ,
                     L_REINSURANCE[1] ,
                     l_software[1],
                     l_cancellation_string[28],
                     l_policy_update_string[17],
                     l_mp_wording[4]="M.P.",
                     l_printers_credit_wording[23]="Printers Credit:",
                     l_total_printers_wording[23]="Total Printers:",
                     l_buyback_option_wording[23]="Buyback Option Charge:",
                     l_fungi_mold_wording[23]="Fungi/Mold Limitations:",
                     l_irpm_wording[12]="IRPM:",
                     l_enter,
                     l_continue_1[3]="",
                     l_continue_2[3]="",
                     l_continue_3[3]="",
                     l_dec[15]="",
                     l_str_zipcode[9]="",
                     l_app[3]="",
                     L_CODE[7],
                     L_CODE_1[7],
                     L_CODE_2[7],
                     L_CODE_3[7],
                     L_CODE_4[7],
                     L_CODE_5[7],
                     L_CODE_6[7],
                     L_CODE_7[7],
                     L_CODE_8[7],
                     l_code_9[7],
                     l_code_10[7],
                     l_code_11[7],
                     l_supplemental_form[7],
                     l_csexec_application[25],
                     l_territory_wording[10]="Territory:",
                     l_system_id[15],
                     L_SCREEN[15] ,
                     l_screen_1[8],
                     L_FORM_EDITION[18],
                     L_DESCRIPTION[55],
                     L_COMPUTER_DESC[50] ,
                     l_computer_desc_1[50],
                     L_DELETE_NONOWNED_HIRED[1]="N",
                     L_ADD_ENDORSEMENT[1]="Y",
                     L_PROPERTY_LIMIT_CHANGE[1]="N",
                     L_COMPANY_ID[10] ,
                     l_minimum_message[200],
                     l_combined_minimum_message[200],
                     l_maximum_message[200],
                     l_combined_maximum_message[200],
                     l_binding_message[200],
                     l_combined_binding_message[200],
                     l_contact_message[200] ;

        local wdate l_eff_date ,
                    l_bpssupplemental_eff_date,
                    l_bpsdefault2_eff_date ,
                    l_allowed_date ;

        include "print.var"

        include "virtualdecs.var"

        include "update.var"

        include "prorata.var"

        include "amtdue.var"

        Access bopGENERAL, Set bopGENERAL:policy_NO = G_policy_NO ,
                               bopgeneral:pol_year = g_year,
                               bopgeneral:end_sequence = g_end_sequence, generic

        Include "stdkeys7.inc"

Style Definition

        Include "styles.inc"

Functions

        "redisplay" display/noreturn "bopmt010" ;

        "add" sequence "new|final|redisplay"      tagged add_fn ;
        "new" add/hidden ;

        "change" sequence "chg|final|redisplay"   tagged change_fn ;
        "chg" change/hidden ;

        "loc" sequence "addloc|add|back" ;
        "addloc" display "sfpmt004" ;

        "update_totals"  sequence "final|redisplay" ;

        "final" continue begin
                         do update_final_rating
                         end ;

        "exit" sequence "mnt_inq"   tagged exit_fn ;
        "back" sequence "mnt_inq"  tagged back_fn ;

        "mnt_inq" continue begin
                           Access SFSLINE, Set SFSLINE:COMPANY_ID       = sfpname:COMPANY_ID,
                                               SFSLINE:LINE_OF_BUSINESS = sfpname:line_of_business,
                                               SFSLINE:LOB_SUBLINE      = "00", Generic

                           if sfsline:lob_code one of "CPORTFOLIO" then
                               l_screen = "lmplib"
                           else
                               begin
                               if g_inquiry = "N" then
                                   l_screen = "sfplib"
                               else
                                   l_screen = "sfplibi"
                               end
                           function = "returntoscreen"
                           end;
        "returntoscreen" screenlib l_screen ;

        "func1" sequence "worksheet"  tagged worksheet_fn ;
        "worksheet" continue begin
                             do create_macro
                             end ;
        "func2" display "bopmt010"  tagged rating_info_fn ;
        "func3" display "sfpmt004"  tagged location_fn ;
        "func4" display "bopmt012"  tagged opt_end_fn ;
        "func14" display "bopmt012a" tagged policy_wide_opt_end_fn ;
        "func5" display "sfpmt002"  tagged mtg_fn ;
        "func6" display "sfpmt003"  tagged misc_fn ;
        "func7" display "sfpmt005"  tagged notes_fn ;
        "func8" sequence "master" tagged master_fn ;
        "master" continue begin
                          g_state  = bopgeneral:state
                          if sfsline:lob_code one of "CPORTFOLIO" then
                              l_screen_1 = "bopmt10d"
                          else
                              l_screen_1 = "bopmt10c"
                          function = "popup"
                          end ;
        "popup"  display l_screen_1 ;

        "func9"  sequence "irpm" tagged irpm_fn;
        "irpm" continue begin
                        if sfsline:lob_code one of "CPORTFOLIO" then
                            l_screen_1 = "bopmt11c"
                        else
                            l_screen_1 = "bopmt11a"
                        function = "popup"
                        end ;
        "func10" display "sfpmt10r" tagged reinsurance_fn ;
        "func11" sequence "loc_credit" tagged location_credit_fn ;
        "loc_credit" continue begin
                              if sfsline:lob_code one of "CPORTFOLIO" then
                                  l_screen_1 = "bopmt11d"
                              else
                                  l_screen_1 = "bopmt11b"
                              function = "popup"
                              end ;
        "func12" sequence "opt_cov" tagged cov_fn ;
        "opt_cov" continue begin
                           if sfpname:company_id = "LEBINS" then
                               l_screen_1 = "bopmt10b"
                           else
                           if sfpname:company_id one of "FLEMINGTON" then
                               l_screen_1 = "bopmt10m"
                           else
                           if sfpname:company_id one of "DELOS", "GGUND" then
                               l_screen_1 = "bopmt10n"
                           else
                           if sfpname:company_id = "NWIC" and
                              bopgeneral:state = 29 then
                               l_screen_1 = "bopmt10g"
                           else
                               l_screen_1 = "bopmt10a"
                           function = "cov_popup"
                           end ;
        "cov_popup" display l_screen_1 ;
        "func13" display "sfpmt10r" tagged reinsurance_fn ;

        "funcZZ" sequence "updatefiles"  tagged update_fn ;
        "updatefiles" continue begin
                               Access SFSLINE, Set SFSLINE:COMPANY_ID       = sfpname:COMPANY_ID,
                                                   SFSLINE:LINE_OF_BUSINESS = sfpname:line_of_business,
                                                   SFSLINE:LOB_SUBLINE      = "00", Generic

                               if sfsline:lob_code not one of "CPORTFOLIO" then
                                   begin
                                   if g_inquiry = "N" then
                                       begin
                                       l_continue_1 = dialog("UPDATE","warning.bmp","You are about to update your changes, do you wish to continue?","Yes", "No")
                                       switch(l_continue_1)
                                         case "Yes" : begin
                                                      do update_files
                                                      function = "EXIT"
                                                      end
                                         end
                                       end
                                   end
                               end ;
        "func14" display "bopmt11g" tagged trans_eff_fn;
        "func15" sequence "opt_cov"  tagged cov_fn ;
        "opt_cov" continue begin
                           if sfpname:company_id = "LEBINS" then
                               l_screen = "bopmt10b"
                           else
                           if sfpname:company_id one of "FLEMINGTON" then
                               l_screen = "bopmt10m"
                           else
                           if sfpname:company_id one of "DELOS", "GGUND" then
                               l_screen = "bopmt10n"
                           else
                               l_screen = "bopmt10a"
                           function = "cov_popup"
                           end;
        "cov_popup" display l_screen ;
        "func16" sequence "epl" tagged epl_fn ;
        "epl" continue begin
                       if sfpmaster:trans_eff < 09.01.2010 then
                           error "Coverage is not available until 9/1/2010"
                        else
                           begin
                           l_allowed_date = dateadd(sfpmaster:trans_eff,6,0)
                           if sfpname:exp_date >= l_allowed_date then
                               begin
                               l_screen_1 = "bopmt10e"
                               function = "cov_popup"
                               end
                           else
                               error "Effective date is less than 6 months of the renewal date"
                           end
                       end ;
        "busdesc" display "bopmt198" tagged busdesc_fn ;
        "func17" display "" tagged busdesc_fn ;

        include "stdfunc7b.inc"

Menu Definition

        Include "stdmenu7.inc"

        include "bopmenu7.inc"

}

Toolbar Definition

        Include "stdtoolbar7.inc"
}

        include "stdblanktoolbar7.inc"

}

        include "boptoolbar7.inc"

}

        include "stdblanktoolbar7.inc"

}

        include "stdupdatetoolbar7.inc"

}

Screen Entry
access sfpname, set sfpname:policy_no    = g_policy_no,
                    sfpname:pol_year     = g_year,
                    sfpname:end_sequence = g_end_sequence, generic

if g_line_of_business = 0 then
    g_line_of_business = sfpname:line_of_business
if g_end_sequence = 9999 then
    disable(update_fn)

Access SFSLINE, Set SFSLINE:COMPANY_ID       = sfpname:COMPANY_ID,
                    SFSLINE:LINE_OF_BUSINESS = sfpname:line_of_business,
                    SFSLINE:LOB_SUBLINE      = "00", Generic

if sfsline:lob_code one of "CPORTFOLIO" then
    function = ""

l_username = username
access sfsemail, set sfsemail:company_id = sfpname:company_id,
                     sfsemail:user_id    = l_username, generic

l_system_id = "bop"
include "rating_security.inc"

if sfssecurity_rating:access_to_reinsurance not one of 1 then
    disable(reinsurance_fn)

if sfssecurity_rating:access_to_irpm not one of 1 then
    disable(irpm_fn)

if sfssecurity_rating:access_to_location_credit not one of 1 then
    disable(location_credit_fn)

access sfscompany, set sfscompany:company_id = sfpname:company_id, generic

if SFSCOMPANY:SPECIAL_TERRITORY_RATING one of 1 and
   sfsemail:agent_no <> 0 then
    begin
    hide(territory_panel)
    hide(delos_territory_panel)
    end

if sfscompany:special_territory_rating one of 1 and
   sfsemail:agent_no = 0 then
    begin
    if sfpname:company_id not one of "DELOS", "GGUND" then
        hide(delos_territory_panel)
    else
        hide(territory_panel)
    end

if sfscompany:special_territory_rating not one of 1 then
    begin
    hide(delos_territory_panel)
    hide(territory_panel)
    end

if sfsdefault:company_id <> "FARMERS" then
    disable(epl_fn)

if ((bpsdefault_alt:special_restaurant_rating = 0 and
   sfsdefault:company_id <> "NWIC") or
   (sfsline:option not one of "P" and
   sfsdefault:company_id <> "NWIC")) then
    begin
    hide(receipts_panel)
    end

if sfsemail:agent_no <> 0 then
    begin
    disable(irpm_fn)
    disable(location_credit_fn)
    end

if sfscompany:optional_coverage_screen not one of 1 then
    begin
--    hide(lebanon_opt_cov)
    hide(lebanon_discounts_panel)
    end

if sfscompany:optional_coverage_screen one of 1 then
    begin
--    hide(opt_cov)
    hide(discounts_panel)
    end

do update_endorsements

if function one of "LINE_OF_BUSINESS_SCREEN", "GOLIB" and
   g_inquiry = "N" then
    begin
    function = "update_totals"
    end

access sfppoint, set sfppoint:policy_no = g_policy_no,
                     sfppoint:pol_year  = g_year, generic

if g_inquiry = "Y" then
    begin
    disable(add_fn)
    disable(change_fn)
    disable(delete_fn)
    disable(update_fn)
    end

--do add_bpstrigger

raisecard(final_rating)

Access Validation
If bopGENERAL:policy_NO    <> G_policy_NO or
   bopgeneral:pol_year     <> g_year or
   bopgeneral:end_sequence <> g_end_sequence Then
    Error 1000 ;

screen at 2,1 to 10, 85
Properties
        {
        Layouttype = column
        }
{
Panel Tagged Header_pl
Properties
        {
        Borderstyle        = raised
        Scrollbarpolicy    = asneeded
        }
{
%%
                                                        _______________
*------------------------------------------------------------------------------*
| Policy No:   _________  ____  ____                                           |
| Location No: ____                                                            |
| Building No: ____                                                            |
*------------------------------------------------------------------------------*

%%

components

Fields
101     FUNCTION/noecho/showasguidetext ;
301     Begin
        if sfsline:lob_code one of "CPORTFOLIO" then
            begin
            access sfpmastsupp, set sfpmastsupp:policy_no    = g_policy_no,
                                    sfpmastsupp:pol_year     = g_year,
                                    sfpmastsupp:end_sequence = g_end_sequence,
                                    sfpmastsupp:line_of_business = g_line_of_business, Generic

            l_form_1 = sfpmastsupp:form
            g_form   = sfpmastsupp:form
            end
        else
            begin
            access sfpmaster, set sfpmaster:policy_no    = g_policy_no,
                                  sfpmaster:pol_year     = g_year,
                                  sfpmaster:end_sequence = g_end_sequence, exact

            l_form_1 = sfpmaster:form
            g_form   = sfpmaster:form
            end
        bopGENERAL:LINE_OF_BUSINESS = g_line_of_business
        bopGENERAL:COMPANY_ID       = sfpNAME:COMPANY_ID
        If FUNCTION one of "ADD", "NEW" Then
            Begin
            bopGENERAL:policy_NO    = G_policy_NO
            bopgeneral:pol_year     = g_year
            bopgeneral:end_sequence = g_end_sequence
            end
        End
        bopGENERAL:policy_NO/displayonly ;
302     bopgeneral:pol_year/displayonly ;
303     bopgeneral:end_sequence/displayonly ;
401     bopGENERAL:PREM_NO  Mandatory ;
501     bopGENERAL:BUILD_NO Mandatory ;

}

carddialog GUI at 1,1
Properties
        {
        layoutconstraints = stretch
        }
{
Panel tagged rating_info
Properties
        {
        scrollbarpolicy = asneeded
        text            = "Rating Information"
        }
{
%%
*------------------------------------------------------------------------------*
| Business Desc: ______________________________ ______________________________ |
*------------------------------------------------------------------------------*
| State:         __  _________________ Rating Territory: ___  ________________ |
| Construction:   _  _________________ Protection:      __  __________________ |
| Tenant:         _                    Percent Owner Occupied: ___             |
| Type:           _  _________________ Sprinklers:             _               |
| Construction Year: ____              Single Occupancy:       _               |
| Key Risk:          _                 Liability Only:         _ __________    |
| No Employees:      _____                                                     |
| Class Code:        _______________________________________   ______          |
*------------------------------------------------------------------------------*
| Building Limit:    __________        Contents Limit:      ___________        |
| Other Structures:  __________        _~Include~with~reinsurance              |
| Building ACV:      _                 Contents ACV:        _                  |
|                                      Special Enhancement: _                  |
*------------------------------------------------------------------------------*

%%

components

fields
201     bopGENERAL:BUSINESS_DESC[1];
202     bopGENERAL:BUSINESS_DESC[2]
        Hide If bopGENERAL:BUSINESS_DESC[1] = "" ;
401     Begin
        If sfssecurity_Rating:auto_activehelp = 1 and
           function one of "ADD", "NEW" Then
            Activehelp()
        If FUNCTION one of "ADD", "NEW" Then
            bopGENERAL:STATE = BPSDEFAULT_ALIAS:STATE
        G_PREM_NO = bopGENERAL:PREM_NO
        G_BUILD_NO = bopGENERAL:BUILD_NO
        End
        bopGENERAL:STATE/default
        Include "statehlp.inc"
402     SFSSTATE:DESCRIPTION ;
403     Begin
        G_STATE = bopGENERAL:STATE
        g_company_id = bopgeneral:company_id
        if function one of "ADD", "NEW" then
            begin
            if (sfscompany:boiler_rating = 4 or
               (sfpname:company_id one of "NWIC", "FARMERS" and
               bopgeneral:state = 29)) then
                begin
                access sfplocation, set sfplocation:policy_no = g_policy_no,
                                        sfplocation:pol_year = g_year,
                                        sfplocation:end_sequence = g_end_sequence,
                                        sfplocation:prem_no = bopgeneral:prem_no,
                                        sfplocation:build_no = bopgeneral:build_no, generic

                if sfplocation:policy_no <> g_policy_no or
                   sfplocation:pol_year <> g_year or
                   sfplocation:end_sequence <> g_end_sequence or
                   sfplocation:prem_no <> bopgeneral:prem_no or
                   sfplocation:build_no <> bopgeneral:build_no then
                    begin
                    display modal screen "sfpmt004"
                    with initial function "ADD|BACK"
                    end
                end
            end
        If FUNCTION one of "ADD", "NEW" And
           bopGENERAL:PREM_NO = 1 And
           bopGENERAL:BUILD_NO = 1 Then
            Begin
            G_STATE = bopGENERAL:STATE
            if sfsline:lob_code one of "CPORTFOLIO" then
                begin
                Access sfpmastsupp, Set sfpmastsupp:policy_NO    = G_policy_NO,
                                        sfpmastsupp:pol_year     = g_year,
                                        sfpmastsupp:end_sequence = g_end_sequence,
                                        sfpmastsupp:line_of_business = g_line_of_business, Generic

                If sfpmastsupp:policy_NO    <> G_policy_NO or
                   sfpmastsupp:pol_year     <> g_year or
                   sfpmastsupp:end_sequence <> g_end_sequence Then
                    Begin
                    g_state = bopgeneral:state
                    Display Modal Screen "bopmt10d"
                    With Initial Function "ADD|BACK"
                    End
                end
            else
                begin
                Access sfpMASTER, Set sfpMASTER:policy_NO    = G_policy_NO,
                                      sfpmaster:pol_year     = g_year,
                                      sfpmaster:end_sequence = g_end_sequence, Generic

                If sfpMASTER:policy_NO    <> G_policy_NO or
                   sfpmaster:pol_year     <> g_year or
                   sfpmaster:end_sequence <> g_end_sequence Then
                    Begin
                    g_state = bopgeneral:state
                    Display Modal Screen "bopmt10c"
                    With Initial Function "ADD|BACK"
                    End
                end

            End
        if sfsline:lob_code one of "CPORTFOLIO" then
            begin
            Access sfpmastsupp, Set sfpmastsupp:policy_NO    = G_policy_NO,
                                    sfpmastsupp:pol_year     = g_year,
                                    sfpmastsupp:end_sequence = g_end_sequence,
                                    sfpmastsupp:line_of_business = g_line_of_business, Generic

            L_FORM = sfpMASTSUPP:FORM
            l_exclude_terrorism = sfpmastsupp:exclude_terrorism
            end
        else
            begin
            Access sfpmaster, Set sfpmaster:policy_NO    = G_policy_NO,
                                  sfpmaster:pol_year     = g_year,
                                  sfpmaster:end_sequence = g_end_sequence, Generic

            L_FORM = sfpMASTER:FORM
            l_exclude_terrorism = sfpmaster:exclude_terrorism
            end

        bopgeneral:remove_terrorism_form = l_exclude_terrorism
        If sfssecurity_rating:auto_activehelp = 1 and
           function one of "ADD", "NEW"  Then
            Activehelp()

        Access BPSDEFAULT, Set BPSDEFAULT:COMPANY_ID = bopgeneral:COMPANY_ID,
                               BPSDEFAULT:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                               BPSDEFAULT:FORM = L_FORM, Generic

        If FUNCTION one of "ADD", "NEW" Then
            bopGENERAL:COUNTY = BPSDEFAULT:COUNTY
        End
        bopGENERAL:COUNTY/default
        if bopgeneral:county <> sfsstate_alias:county or
           bopgeneral:county = 0 then
            error 1222

        activehelp if sfsstate_alias:county <> 0 then
                       sfsstate_alias:county
                   else
                       null,
                   if sfsstate_alias:county <> 0 then
                       sfsstate_alias:description
                   else
                       null ;
403     Begin
        bopGENERAL:TERRITORY = SFSTERRITORY:TERRITORY
        End
        bopGENERAL:COUNTY/displayonly ;
404     SFSSTATE_ALIAS:DESCRIPTION;
501     Begin
        If FUNCTION one of "ADD", "NEW" Then
            bopGENERAL:CONSTRUCTION = BPSDEFAULT:CONSTRUCTION
        If sfssecurity_rating:auto_activehelp = 1 and
           function one of "ADD", "NEW" Then
            Activehelp()
        End
        bopGENERAL:CONSTRUCTION/default
        If bopGENERAL:CONSTRUCTION <> SFSCONSTRUCTION:CONSTRUCTION Or
           bopGENERAL:CONSTRUCTION = 0 Then
            Error 1203
        Activehelp SFSCONSTRUCTION_ALIAS:CONSTRUCTION,
                   SFSCONSTRUCTION_ALIAS:DESCRIPTION ;
502     SFSCONSTRUCTION:DESCRIPTION;
503     Begin
        If FUNCTION one of "ADD", "NEW" Then
            bopGENERAL:PROTECTION = BPSDEFAULT:PROTECTION
        If sfssecurity_rating:auto_activehelp = 1 and
           function one of "ADD", "NEW" Then
            Activehelp()
        End
        bopGENERAL:PROTECTION/default
        If bopGENERAL:PROTECTION <> SFSPROTECTION:PROTECTION Or
           bopGENERAL:PROTECTION = 0 Then
            Error 1204
        Activehelp SFSPROTECTION_ALIAS:PROTECTION,
                   SFSPROTECTION_ALIAS:DESCRIPTION ;
504     SFSPROTECTION:DESCRIPTION;
601     Begin
        If FUNCTION one of "ADD", "NEW" Or
           FUNCTION one of "CHANGE", "CHG" Then
            Begin
            If bopGENERAL:BOP_TYPE > 1 Then
                Do SET_RATE_NO
            End
        End
        bopGENERAL:TENANT/checkbox/values="N,Y" ;
602     bopGENERAL:PERCENT_OCCUPIED
        Hide If bopGENERAL:TENANT = "Y" ;
701     Begin
        if bopgeneral:tenant = "Y" then
            begin
            bopgeneral:percent_occupied = 0
            bopgeneral:single_occupancy = "N"
            end
        If FUNCTION one of "ADD", "NEW" Then
            bopGENERAL:BOP_TYPE = BPSDEFAULT:BOP_TYPE
        If sfssecurity_rating:auto_activehelp = 1 and
           function one of "ADD", "NEW" Then
            Activehelp()
        End
        bopGENERAL:BOP_TYPE/default
        If bopGENERAL:BOP_TYPE <> BPSTYPE:BOP_TYPE Or
           bopGENERAL:BOP_TYPE = 0 Then
            Error 1262

        Activehelp BPSTYPE_ALIAS:BOP_TYPE ,
                   BPSTYPE_ALIAS:DESCRIPTION ;
702     BPSTYPE:DESCRIPTION ;
703     bopGENERAL:SPRINKLERS/checkbox/values="N,Y"
        if bpsdefault:sprinkler_warning = 1 and
           function one of "ADD", "NEW" then
            warning "Must be approved by MSO" ;
801     bopGENERAL:CONSTRUCTION_YEAR
        If bopGENERAL:CONSTRUCTION_YEAR[1,2] = 0 Then
            bopGENERAL:CONSTRUCTION_YEAR[1,2] = 19
        if bopgeneral:construction_year < bpsdefault:construction_year and
           bpsdefault:construction_year <> 0 and
           sfsemail:agent_no <> 0 then
            error "Not eligible for BOP if year of construction is prior to 1950" ;
801     bopGENERAL:CONSTRUCTION_YEAR/displayonly ;
802     begin
        if function one of "ADD", "NEW", "CHANGE", "CHG" and
           bopgeneral:percent_occupied = 100 and
           bpsdefault:default_single_occupancy = 1 then
            bopgeneral:single_occupancy = "Y"
        end
        bopGENERAL:SINGLE_OCCUPANCY/checkbox/values="N,Y"/default
        Hide If bopGENERAL:TENANT = "Y" Or
                bopGENERAL:PERCENT_OCCUPIED < 100 ;
901     bopgeneral:key_risk/checkbox/values="0,1"/displayonly
        hide if sfpname:reinsurance = "N" ;
901     begin
        if sfpname:reinsurance = "N" then
            bopgeneral:key_risk = 0
        end
        bopgeneral:key_risk/displayonly/checkbox/values="0,1" ;
902     bopgeneral:liability_only/checkbox/values="0,1"
        hide if sfsemail:agent_no <> 0
        hide if sfpname:company_id one of "DELOS", "GGUND"
        if bopgeneral:liability_only = 0 then
            bopgeneral:liability_premium = 0 ;
903     bopgeneral:liability_premium/mask="ZZZ,ZZZ.99"
        hide if bopgeneral:liability_only = 0 ;
1001    bopgeneral:no_employees ;
1101    Begin
        Access BPSCLASS, Set BPSCLASS:COMPANY_ID = bopGENERAL:COMPANY_ID ,
                             BPSCLASS:STATE = bopGENERAL:STATE,
                             BPSCLASS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS,
                             BPSCLASS:CLASS_CODE = bopGENERAL:CLASS_CODE,
                             BPSCLASS:SUB_CODE = bopGENERAL:SUB_CODE, Generic

        Repeat Begin
            Exit If BPSCLASS:COMPANY_ID <> bopGENERAL:COMPANY_ID Or
                    BPSCLASS:STATE <> bopGENERAL:STATE Or
                    BPSCLASS:LINE_OF_BUSINESS <> bopGENERAL:LINE_OF_BUSINESS Or
                    BPSCLASS:CLASS_CODE <> bopGENERAL:CLASS_CODE Or
                    BPSCLASS:SUB_CODE <> bopGENERAL:SUB_CODE

            If sfpNAME:EFF_DATE >= BPSCLASS:EFF_DATE Then
                L_DESC = BPSCLASS:DESCRIPTION[1]

            Next BPSCLASS
            End
        End
        L_DESC/displayonly ;
1101    Begin
        l_eff_date = sfpname:eff_date
        Access BPSCLASS_ALIAS, Set BPSCLASS_ALIAS:COMPANY_ID = bopGENERAL:COMPANY_ID,
                                   BPSCLASS_ALIAS:STATE = bopGENERAL:STATE,
                                   BPSCLASS_ALIAS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS,
                                   BPSCLASS_ALIAS:ALPHA_LOOK = L_DESC, generic

        If sfssecurity_rating:auto_activehelp = 1 and
           function one of "ADD", "NEW"  Then
            Activehelp()

        End
        L_DESC/default/upper      Mandatory
        Access BPSCLASS_ALIAS, Set BPSCLASS_ALIAS:COMPANY_ID = bopGENERAL:COMPANY_ID,
                                   BPSCLASS_ALIAS:STATE = bopGENERAL:STATE,
                                   BPSCLASS_ALIAS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS,
                                   BPSCLASS_ALIAS:ALPHA_LOOK = L_DESC, Approximate

        Activehelp If ((l_eff_date >= bpsclass_alias:eff_date and
                      (l_eff_date <= bpsclass_alias:exp_date or
                      bpsclass_alias:exp_date = 0)) and
                      (BPSCLASS_alias:hide_From_rating = 0 or
                      (bpsclass_alias:hide_from_rating = 1 and
                      sfsemail:agent_no = 0))) then
                       BPSCLASS_ALIAS:ALPHA_LOOK
                   Else
                       NULL/width=50,
                   If ((l_eff_date >= bpsclass_alias:eff_date and
                      (l_eff_date <= bpsclass_alias:exp_date or
                      bpsclass:exp_date = 0)) and
                      (bpsclass_alias:hide_from_rating = 0 or
                      (bpsclass_alias:hide_from_rating = 1 and
                      sfsemail:agent_no = 0))) Then
                       BPSCLASS_ALIAS:CLASS_CODE
                   Else
                       NULL ;
1102    Begin
        Access BPSCLASS_ALIAS, Set BPSCLASS_ALIAS:COMPANY_ID = bopGENERAL:COMPANY_ID,
                                   BPSCLASS_ALIAS:STATE = bopGENERAL:STATE,
                                   BPSCLASS_ALIAS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS,
                                   BPSCLASS_ALIAS:ALPHA_LOOK = L_DESC, Generic

        bopGENERAL:CLASS_CODE = BPSCLASS_ALIAS:CLASS_CODE
        bopGENERAL:SUB_CODE = BPSCLASS_ALIAS:SUB_CODE
        bopGENERAL:RATE_NO = BPSCLASS_ALIAS:RATE_NO
        bopGENERAL:RATE_GROUP = BPSCLASS_ALIAS:RATE_GROUP
        L_DELETE_NONOWNED_HIRED = BPSCLASS_ALIAS:DELETE_NONOWNED_HIRED
--        if sfpname:company_id one of "DELOS", "GGUND" then
        if l_delete_nonowned_hired one of "", "N" then
            l_delete_nonowned_hired = sfpmaster:delete_hired_nonowned
        bopGENERAL:RESTAURANT = BPSCLASS_ALIAS:RESTAURANT
        l_restaurant          = bpsclass_alias:restaurant
        End
        bopGENERAL:CLASS_CODE/displayonly ;

1301    begin
        if bopgeneral:class_code one of 75 and
           bopgeneral:bop_type = 9 and
           sfscompany:boiler_rating = 1 then
            bopgeneral:condo = 1
        else
            bopgeneral:condo = 0

        do minimum_maximum_limits
        end
        bopGENERAL:BUILDING_LIMIT   tagged building_tag
        If bopGENERAL:BUILDING_LIMIT = 0 Then
            bopGENERAL:BUILDING_PREMIUM = 0

        If bopgeneral:building_limit < l_building_minimum_limit and
           l_building_minimum_limit <> 0 and
           bopgeneral:building_limit <> 0 and
           sfsemail:agent_no <> 0 Then
            Begin
            if l_min_error = 0 then
                begin
                l_continue_2 = dialog("MINIMUM LIMITS","warning.bmp",trun(l_minimum_message),"Yes","No")
                if l_continue_2 = "No" and
                   sfsemail:agent_no <> 0 then
                    begin
                    l_continue_3 = dialog("CONTACT UNDERWRITER","warning.bmp",trun(l_contact_message),"OK")
                    end
                if l_continue_2 = "Yes" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            else
                begin
                l_continue_2 = dialog("MINIMUM LIMITS","warning.bmp",trun(l_minimum_message),"OK")
                if l_continue_2 = "OK" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            end
        else
        if bopgeneral:building_limit < bpsdefault:minimum_limit[1] and
           bopgeneral:building_limit <> 0 and
           bpsdefault:minimum_limit[1] <> 0 and
           l_minimum_limit = 0 then
            error "Limit entered is less than program minimum"

        if bopgeneral:building_limit > l_building_maximum_limit and
           l_building_maximum_limit <> 0 and
           bopgeneral:building_limit <> 0 and
           sfsemail:agent_no <> 0 then
            begin
            if l_max_error = 0 then
                begin
                l_continue_2 = dialog("MAXIMUM LIMITS","warning.bmp",trun(l_maximum_message),"Yes","No")
                if l_continue_2 = "No" and
                   sfsemail:agent_no <> 0 then
                    begin
                    l_continue_3 = dialog("CONTACT UNDERWRITER","warning.bmp",trun(l_contact_message),"OK")
                    end
                if l_continue_2 = "Yes" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            else
                begin
                l_continue_2 = dialog("MAXIMUM LIMITS","warning.bmp",trun(l_maximum_message),"OK")
                if l_continue_2 = "OK" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            end
        else
        if bopgeneral:building_limit > bpsdefault:maximum_limit[1] and
           bopgeneral:building_limit <> 0 and
           bpsdefault:maximum_limit[1] <> 0 and
           l_maximum_limit = 0 then
            error "Limit entered is greater than program maximum, contact underwriter before binding" ;

1401    bopGENERAL:OTHER_STRUCTURES
        Hide If bopGENERAL:BUILDING_LIMIT = 0
        If bopGENERAL:OTHER_STRUCTURES > bopGENERAL:BUILDING_LIMIT Then
            Error 1238 ;
1402    Begin
        If bopGENERAL:INCLUDE_WITH_REINSURANCE Not One Of "N", "Y" Then
            Begin
            bopGENERAL:INCLUDE_WITH_REINSURANCE = "N"
            End
        End
        bopGENERAL:INCLUDE_WITH_REINSURANCE/checkbox
        Hide If bopGENERAL:OTHER_STRUCTURES = 0 ;
1501    bopGENERAL:ACV_BUILDING/checkbox/values="N,Y"
        Hide If bopGENERAL:BUILDING_LIMIT = 0 ;
1302    Begin
            L_PROPERTY_LIMIT = bopGENERAL:PROPERTY_LIMIT
        End
        bopGENERAL:PROPERTY_LIMIT
        l_property_limit_1 = bopgeneral:property_limit

        If bopgeneral:property_limit < l_contents_minimum_limit and
           l_contents_minimum_limit <> 0 and
           bopgeneral:property_limit <> 0 and
           sfsemail:agent_no <> 0 Then
            Begin
            if l_min_error = 0 then
                begin
                l_continue_2 = dialog("MINIMUM LIMITS","warning.bmp",trun(l_minimum_message),"Yes","No")
                if l_continue_2 = "No" and
                   sfsemail:agent_no <> 0 then
                    begin
                    l_continue_3 = dialog("CONTACT UNDERWRITER","warning.bmp",trun(l_contact_message),"OK")
                    end
                if l_continue_2 = "Yes" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            else
                begin
                l_continue_2 = dialog("MINIMUM LIMITS","warning.bmp",trun(l_minimum_message),"OK")
                if l_continue_2 = "OK" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            end
        else
        if bopgeneral:property_limit < bpsdefault:minimum_limit[2] and
           bopgeneral:property_limit <> 0 and
           bpsdefault:minimum_limit[2] <> 0 then
            error "Limit entered is less than program minimum"

        if bopgeneral:property_limit > l_contents_maximum_limit and
           l_contents_maximum_limit <> 0 and
           bopgeneral:property_limit <> 0 and
           sfsemail:agent_no <> 0 then
            begin
            if l_max_error = 0 then
                begin
                l_continue_2 = dialog("MAXIMUM LIMITS","warning.bmp",trun(l_maximum_message),"Yes","No")
                if l_continue_2 = "No" and
                   sfsemail:agent_no <> 0 then
                    begin
                    l_continue_3 = dialog("CONTACT UNDERWRITER","warning.bmp",trun(l_contact_message),"OK")
                    end
                if l_continue_2 = "Yes" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            else
                begin
                l_continue_2 = dialog("MAXIMUM LIMITS","warning.bmp",trun(l_maximum_message),"OK")
                if l_continue_2 = "OK" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            end
        else
        if bopgeneral:property_limit > bpsdefault:maximum_limit[2] and
           bopgeneral:property_limit <> 0 and
           bpsdefault:maximum_limit[2] <> 0 then
            error "Limit entered is greater than program maximum, contact underwriter before binding"

        if bopgeneral:building_limit + bopgeneral:property_limit > l_combined_maximum_limit and
           l_combined_maximum_limit <> 0 and
           sfsemail:agent_no <> 0 then
            begin
            if l_max_error = 0 then
                begin
                l_continue_2 = dialog("MAXIMUM COMBINED LIMITS","warning.bmp",trun(l_combined_maximum_message),"Yes","No")
                if l_continue_2 = "No" then
                    begin
                    l_continue_3 = dialog("CONTACT UNDERWRITER","warning.bmp",trun(l_contact_message),"OK")
                    end
                if l_continue_2 = "Yes" then
                    begin
                    error "Please change the limit entered"
                    end
                end
            else
                begin
                l_continue_2 = dialog("MAXIMUM COMBINED LIMITS","warning.bmp",trun(l_combined_maximum_message),"OK")
                if l_continue_2 = "OK" then
                    begin
                    goto (building_tag)
                    end
                end
            end

        if bopgeneral:building_limit + bopgeneral:property_limit > l_combined_binding_limit and
           bopgeneral:building_limit + bopgeneral:property_limit <= l_combined_maximum_limit and
           l_combined_binding_limit <> 0 and
           l_combined_maximum_limit <> 0 and
           sfsemail:agent_no <> 0 then
            begin
            if l_binding_error = 0 then
                begin
                l_continue_2 = dialog("COMBINED BINDING LIMITS","warning.bmp",trun(l_combined_binding_message),"Yes","No")
                if l_continue_2 = "No" then
                    begin
                    l_continue_3 = dialog("CONTACT UNDERWRITER","warning.bmp",trun(l_contact_message),"OK")
                    end
                if l_continue_2 = "Yes" then
                    begin
                    goto (building_tag)
--                    error "Please change the limit entered"
                    end
                end
            else
                begin
                l_continue_2 = dialog("COMBINED BINDING LIMITS","warning.bmp",trun(l_combined_binding_message),"OK")
                if l_continue_2 = "OK" then
                    begin
                    goto (building_tag)
--                    error "Please change the limit entered"
                    end
                end
            end
        else
            begin
            l_combined_limit = bopgeneral:building_limit + bopgeneral:property_limit
            if l_combined_limit > bpsdefault:combined_limit and
               bpsdefault:combined_limit <> 0 then
                error "Combined building and contents exceeds program maximum, contact underwriter before binding"
            end

        If bopGENERAL:PROPERTY_LIMIT = 0 And
           bopGENERAL:BUILDING_LIMIT = 0 and
           bopgeneral:liability_only = 0 Then
            Error 1317

        If bopGENERAL:PROPERTY_LIMIT = 0 Then
            bopGENERAL:PROPERTY_PREMIUM = 0

        If bopGENERAL:PROPERTY_LIMIT <> L_PROPERTY_LIMIT Then
            L_PROPERTY_LIMIT_CHANGE = "Y"
        Else
            L_PROPERTY_LIMIT_CHANGE = "N" ;
1502    bopGENERAL:ACV_CONTENTS/checkbox/values="N,Y"
        Hide If bopGENERAL:PROPERTY_LIMIT = 0;
1502    bopgeneral:acv_contents/checkbox/values="N,Y"/displayonly ;

1601    begin
            l_special_enhancement = bopgeneral:special_enhancement
        end
        bopgeneral:special_enhancement/checkbox/values="0,1"
        hide if bopgeneral:property_limit = 0
        hide if SFSCOMPANY:SPECIAL_TERRITORY_RATING not one of 1
        hide if bopgeneral:line_of_business not one of 5, 50 ;
1601    begin
        if bopgeneral:property_limit = 0 and
           bopgeneral:special_enhancement = 1 then
            bopgeneral:special_enhancement = 0
        if bopgeneral:line_of_business not one of 5, 50 and
           bopgeneral:special_enhancement = 1 then
            bopgeneral:special_enhancement = 0
        if sfscompany:special_territory_rating = 0 and
           bopgeneral:special_enhancement = 1 then
            bopgeneral:special_enhancement = 0
        if function one of "ADD", "NEW" then
            begin
            if bopgeneral:state = 29 and
               sfpname:company_id = "NWIC" then
                do add_optional_coverages_bpsdefault2
            else
            if sfpname:company_id = "FARMERS" and
               sfpname:eff_date >= 08.01.2012 then
                do add_optional_coverages_bpsdefault2
            else
                do add_optional_coverages
            end

        if function one of "CHG", "CHANGE" and
           sfscompany:boiler_rating <> 4 then
            begin
            if bopgeneral:state = 29 and
               sfpname:company_id = "NWIC" then
                do change_optional_coverages_bpsdefault2
            else
            if sfpname:company_id = "FARMERS" and
               sfpname:eff_date >= 08.01.2012 then
                do change_optional_coverages_bpsdefault2
            else
                begin
                do change_optional_coverages
                end
            end

        if function one of "CHG", "CHANGE" and
           bopgeneral:special_enhancement <> l_special_enhancement and
           sfscompany:boiler_rating <> 4 then
            begin
            do change_optional_coverages_special
            end
        end
        bopgeneral:special_enhancement/checkbox/values="0,1"/displayonly ;

}

panel tagged receipts_panel
Properties
        {
        scrollbarpolicy = asneeded
        text            = "Receipts"
        }
{
%%
*------------------------------------------------------------------------------*
|                            Receipts: _____________                           |
*------------------------------------------------------------------------------*

%%

components

Fields
201     bopGENERAL:RECEIPTS
        hide if ((l_restaurant not one of 1 and
                sfscompany:boiler_rating <> 4) or
                (l_restaurant not one of 1 and
                sfpname:company_id = "NWIC") or
                bpsdefault:special_restaurant_rating = 0) ;

}

panel tagged discounts_panel
Properties
        {
        scrollbarpolicy = asneeded
        text            = "Discounts"
        }
{
%%
*------------------------------------------------------------------------------*
|                      Experience Rating:         __                           |
|                      Central Alarm:             _                            |
|                      Burglar Alarm:             _                            |
|                      Superior Conditions:       _                            |
*------------------------------------------------------------------------------*

%%

components

fields
201     bopGENERAL:LOSS_YEARS
        If bopGENERAL:LOSS_YEARS > 4 Then
            Error "Can not enter more than 4 years" ;

301     bopGENERAL:ALARM_OPTION[1]/checkbox/values="N,Y" ;
401     bopGENERAL:ALARM_OPTION[2]/checkbox/values="N,Y" ;
501     bopGENERAL:ALARM_OPTION[3]/checkbox/values="N,Y" ;

}

panel tagged lebanon_discounts_panel
Properties
        {
        scrollbarpolicy = asneeded
        text            = "Discounts"
        }
{
%%
*------------------------------------------------------------------------------*
|                      Fire Alarm:         _                                   |
|                      Burglar Alarm:      _            Factor:  _______       |
*------------------------------------------------------------------------------*

%%

components

fields
201     bopGENERAL:alarm_option[1]/checkbox/values="N,Y" ;
301     bopGENERAL:alarm_option[2]/checkbox/values="N,Y"
        if bopgeneral:alarm_option[1] = "N" and
           bopgeneral:alarm_option[2] = "N" then
            bopgeneral:alarm_factor = 0 ;
302     bopgeneral:alarm_factor
        hide if bopgeneral:alarm_option[1] = "N" and
                bopgeneral:alarm_option[2] = "N" ;

}

panel tagged territory_panel
Properties
        {
        scrollbarpolicy = asneeded
        text            = "Territory Factor"
        }
{
%%
*------------------------------------------------------------------------------*
|                              Territory:         ___                          |
*------------------------------------------------------------------------------*
|                              [R _~~Group~1      ______                       |
|                                 _~~Group~2      ______                       |
|                                 _~~Other R]     ______                       |
*------------------------------------------------------------------------------*

%%

components

Fields
201     begin
            l_eff_date = sfpname:eff_date
        end
        bopGENERAL:RATING_TERRITORY
        hide if SFSCOMPANY:SPECIAL_TERRITORY_RATING not one of 1
        Access BPSRATINGTERR, Set BPSRATINGTERR:COMPANY_ID       = sfpNAME:COMPANY_ID,
                                  BPSRATINGTERR:STATE            = bopGENERAL:STATE,
                                  BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                                  BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY,
                                  BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY, Generic

        If bopGENERAL:RATING_TERRITORY <> BPSRATINGTERR:TERRITORY Then
            Error 1206

        bopGENERAL:RATING_TERRITORY_SUB_CODE = BPSRATINGTERR_ALIAS:SUB_CODE

        Activehelp if (l_eff_date >= bpsratingterr_alias:eff_date and
                      (l_eff_date <= bpsratingterr_alias:exp_date or
                      bpsratingterr_alias:exp_date = 0)) then
                       BPSRATINGTERR_ALIAS:TERRITORY
                   else
                       null,
                   if (l_eff_date >= bpsratingterr_alias:eff_date and
                      (l_eff_date <= bpsratingterr_alias:exp_date or
                      bpsratingterr_alias:exp_date = 0)) then
                       BPSRATINGTERR_ALIAS:DESCRIPTION
                   else
                       null ;

402     Begin
        Access BPSRATINGTERR, Set BPSRATINGTERR:COMPANY_ID       = sfpNAME:COMPANY_ID,
                                  BPSRATINGTERR:STATE            = bopGENERAL:STATE,
                                  BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                                  BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY,
                                  BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY, Generic

        while BPSRATINGTERR:COMPANY_ID       = sfpNAME:COMPANY_ID and
              BPSRATINGTERR:STATE            = bopGENERAL:STATE and
              BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:line_of_business and
              BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY and
              BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY
                begin
                if (l_eff_date >= bpsratingterr:eff_date and
                   (l_eff_date <= bpsratingterr:exp_date or
                   bpsratingterr:exp_date = 0)) then
                    begin
                    l_group_1 = bpsratingterr:group_1
                    l_group_2 = bpsratingterr:group_2
                    end

                next bpsratingterr
                end
        End
        L_GROUP_1/displayonly ;
501     L_GROUP_2/displayonly ;

401     bopGENERAL:RATING_TERRITORY_GROUP/values="1,2,3" ;
402     Begin
        Access BPSRATINGTERR, Set BPSRATINGTERR:COMPANY_ID       = sfpNAME:COMPANY_ID,
                                  BPSRATINGTERR:STATE            = bopGENERAL:STATE,
                                  BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                                  BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY,
                                  BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY, Generic

        while BPSRATINGTERR:COMPANY_ID       = sfpNAME:COMPANY_ID and
              BPSRATINGTERR:STATE            = bopGENERAL:STATE and
              BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:line_of_business and
              BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY and
              BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY
                begin
                if (l_eff_date >= bpsratingterr:eff_date and
                   (l_eff_date <= bpsratingterr:exp_date or
                   bpsratingterr:exp_date = 0)) then
                    begin
                    l_group_1 = bpsratingterr:group_1
                    l_group_2 = bpsratingterr:group_2
                    end

                next bpsratingterr
                end
        End
        L_GROUP_1/displayonly
        If bopGENERAL:RATING_TERRITORY_GROUP = 1 Then
            bopGENERAL:RATING_TERRITORY_FACTOR = L_GROUP_1 ;
501     L_GROUP_2/displayonly
        If bopGENERAL:RATING_TERRITORY_GROUP = 2 Then
            bopGENERAL:RATING_TERRITORY_FACTOR = L_GROUP_2 ;
601     bopGENERAL:RATING_TERRITORY_FACTOR
        Hide If bopGENERAL:RATING_TERRITORY_GROUP <> 3 ;
}

panel tagged delos_territory_panel
Properties
        {
        scrollbarpolicy = asneeded
        text            = "Territory Factor"
        }
{
%%
*------------------------------------------------------------------------------*
|                              Territory:      ___                             |
*------------------------------------------------------------------------------*
|                   [R     _~~Factor           ______  ______                  |
|                          _~~Other  R]        ______  ______                  |
*------------------------------------------------------------------------------*
|                          _~~Special~Exposure ______                          |
*------------------------------------------------------------------------------*
| Stories:  __             No Units: ___                                       |
*------------------------------------------------------------------------------*

%%

components

Fields
201     begin
            l_eff_date = sfpname:eff_date
        end
        bopGENERAL:RATING_TERRITORY
        hide if SFSCOMPANY:SPECIAL_TERRITORY_RATING not one of 1
        hide if bopgeneral:state not one of 29
        Access BPSRATINGTERR, Set BPSRATINGTERR:COMPANY_ID       = sfpname:COMPANY_ID,
                                  BPSRATINGTERR:STATE            = bopGENERAL:STATE,
                                  BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                  BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY,
                                  BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY, Generic

        If bopGENERAL:RATING_TERRITORY <> BPSRATINGTERR:TERRITORY or
           bopgeneral:rating_territory = 0 Then
            Error 1206

        bopGENERAL:RATING_TERRITORY_SUB_CODE = BPSRATINGTERR_ALIAS:SUB_CODE

        Activehelp if (l_eff_date >= bpsratingterr_alias:eff_date and
                      (l_eff_date <= bpsratingterr_alias:exp_date or
                      bpsratingterr_alias:exp_date = 0)) then
                       BPSRATINGTERR_ALIAS:TERRITORY
                   else
                       null,
                   if (l_eff_date >= bpsratingterr_alias:eff_date and
                      (l_eff_date <= bpsratingterr_alias:exp_date or
                      bpsratingterr_alias:exp_date = 0)) then
                       BPSRATINGTERR_ALIAS:DESCRIPTION
                   else
                       null ;
201     begin
            l_eff_date = sfpname:eff_date
            bopgeneral:rating_territory = bopgeneral:territory
        end
        bopGENERAL:RATING_TERRITORY/displayonly
        hide if SFSCOMPANY:SPECIAL_TERRITORY_RATING not one of 1
        hide if bopgeneral:state one of 29 ;

402     Begin
        Access BPSRATINGTERR, Set BPSRATINGTERR:COMPANY_ID       = bopgeneral:COMPANY_ID,
                                  BPSRATINGTERR:STATE            = bopGENERAL:STATE,
                                  BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                  BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY,
                                  BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY, Generic

        while BPSRATINGTERR:COMPANY_ID       = bopgeneral:COMPANY_ID and
              BPSRATINGTERR:STATE            = bopGENERAL:STATE and
              BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS and
              BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY and
              BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY
                begin
                if (l_eff_date >= bpsratingterr:eff_date and
                   (l_eff_date <= bpsratingterr:exp_date or
                   bpsratingterr:exp_date = 0)) then
                    begin
                    l_group_1 = bpsratingterr:group_1
                    end

                next bpsratingterr
                end
        End
        L_GROUP_1/displayonly
        hide if bopgeneral:state not one of 29
        hide if sfsemail:agent_no <> 0 ;
402     Begin
        l_str_zipcode = str(sfplocation:zipcode[1,5]) + "0000"
        l_zipcode = val(l_str_zipcode)
        Access sfsterritory1, Set sfsterritory1:COMPANY_ID       = sfpname:COMPANY_ID,
                                  sfsterritory1:STATE            = bopGENERAL:STATE,
                                  sfsterritory1:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                  sfsterritory1:zipcode          = l_zipcode,
                                  sfsterritory1:territory        = bopgeneral:territory, generic

        while sfsterritory1:COMPANY_ID       = sfpname:COMPANY_ID and
              sfsterritory1:STATE            = bopGENERAL:STATE and
              sfsterritory1:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS and
              sfsterritory1:zipcode          = l_zipcode and
              sfsterritory1:territory        = bopgeneral:territory
                begin
                if l_eff_date >= sfsterritory1:eff_date then
                    begin
                    l_group_1 = sfsterritory1:factor[1]
                    end

                next sfsterritory1
                end

        access sfsterritory, set sfsterritory:company_id = sfpname:company_Id,
                                 sfsterritory:state = bopgeneral:state,
                                 sfsterritory:line_of_business = bopgeneral:line_of_business,
                                 sfsterritory:county = bopgeneral:county,
                                 sfsterritory:territory = bopgeneral:territory, generic

        l_territory = sfsterritory:territory_group[1]
        Access sfsterrfactors, Set sfsterrfactors:COMPANY_ID       = sfpname:COMPANY_ID,
                                   sfsterrfactors:STATE            = bopGENERAL:STATE,
                                   sfsterrfactors:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                   sfsterrfactors:territory        = l_territory, generic

        while sfsterrfactors:COMPANY_ID       = sfpname:COMPANY_ID and
              sfsterrfactors:STATE            = bopGENERAL:STATE and
              sfsterrfactors:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS and
              sfsterrfactors:territory        = l_territory
                begin
                if l_eff_date >= sfsterrfactors:eff_date then
                    begin
                    l_group_1 = sfsterrfactors:factor[1]
                    l_group_2 = sfsterrfactors:factor[2]
                    end

                next sfsterrfactors
                end
        End
        L_GROUP_1/displayonly
        hide if bopgeneral:state one of 29
        hide if sfsemail:agent_no <> 0 ;
403     begin
        if function one of "ADD", "NEW", "CHG", "CHANGE" then
            begin
            if l_group_2 <> 0 then
                bopgeneral:territory_factors[2] = l_group_2
            else
                bopgeneral:territory_factors[2] = l_group_1
            end
        end
        l_group_2/displayonly
        hide if bopgeneral:state one of 29
        hide if sfsemail:agent_no <> 0 ;

401     begin
        if function one of "ADD", "NEW" then
            begin
            bopgeneral:rating_territory_group = 1
            end
        end
        bopGENERAL:RATING_TERRITORY_GROUP/values="1,2"/default
        hide if bopgeneral:state not one of 29 ;
401     begin
        if function one of "ADD", "NEW" then
            begin
            bopgeneral:rating_territory_group = 1
            end
        end
        bopGENERAL:RATING_TERRITORY_GROUP/values="1,2"/default
        hide if bopgeneral:state one of 29 ;

402     Begin
        Access BPSRATINGTERR, Set BPSRATINGTERR:COMPANY_ID = bopgeneral:COMPANY_ID,
                                  BPSRATINGTERR:STATE = bopGENERAL:STATE,
                                  BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                  BPSRATINGTERR:COUNTY = bopGENERAL:COUNTY,
                                  BPSRATINGTERR:TERRITORY = bopGENERAL:RATING_TERRITORY, Generic

        while BPSRATINGTERR:COMPANY_ID       = bopgeneral:COMPANY_ID and
              BPSRATINGTERR:STATE            = bopGENERAL:STATE and
              BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS and
              BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY and
              BPSRATINGTERR:TERRITORY        = bopGENERAL:RATING_TERRITORY
                begin
                if (l_eff_date >= bpsratingterr:eff_date and
                   (l_eff_date <= bpsratingterr:exp_date or
                   bpsratingterr:exp_date = 0)) then
                    begin
                    l_group_1 = bpsratingterr:group_1
                    l_group_2 = bpsratingterr:group_2
                    end

                next bpsratingterr
                end
        End
        L_GROUP_1/displayonly
        hide if bopgeneral:state not one of 29
        hide if sfsemail:agent_No <> 0
        If bopGENERAL:RATING_TERRITORY_GROUP = 1 Then
            bopGENERAL:RATING_TERRITORY_FACTOR = L_GROUP_1 ;
402     Begin
        Access sfsterritory1, Set sfsterritory1:COMPANY_ID       = sfpname:COMPANY_ID,
                                  sfsterritory1:STATE            = bopGENERAL:STATE,
                                  sfsterritory1:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                  sfsterritory1:zipcode          = l_zipcode,
                                  sfsterritory1:territory        = bopgeneral:territory, generic

        while sfsterritory1:COMPANY_ID       = sfpname:COMPANY_ID and
              sfsterritory1:STATE            = bopGENERAL:STATE and
              sfsterritory1:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS and
              sfsterritory1:zipcode          = l_zipcode and
              sfsterritory1:territory        = bopgeneral:territory
                begin
                if l_eff_date >= sfsterritory1:eff_date then
                    begin
                    l_group_1 = sfsterritory1:factor[1]
                    end

                next sfsterritory1
                end

        access sfsterritory, set sfsterritory:company_id = sfpname:company_Id,
                                 sfsterritory:state = bopgeneral:state,
                                 sfsterritory:line_of_business = bopgeneral:line_of_business,
                                 sfsterritory:county = bopgeneral:county,
                                 sfsterritory:territory = bopgeneral:territory, generic

        l_territory = sfsterritory:territory_group[1]
        Access sfsterrfactors, Set sfsterrfactors:COMPANY_ID       = sfpname:COMPANY_ID,
                                   sfsterrfactors:STATE            = bopGENERAL:STATE,
                                   sfsterrfactors:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                   sfsterrfactors:territory        = l_territory, generic

        while sfsterrfactors:COMPANY_ID       = sfpname:COMPANY_ID and
              sfsterrfactors:STATE            = bopGENERAL:STATE and
              sfsterrfactors:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS and
              sfsterrfactors:territory        = l_territory
                begin
                if l_eff_date >= sfsterrfactors:eff_date then
                    begin
                    l_group_1 = sfsterrfactors:factor[1]
                    l_group_2 = sfsterrfactors:factor[2]
                    end

                next sfsterrfactors
                end
        End
        L_GROUP_1/displayonly
        hide if bopgeneral:state one of 29
        hide if sfsemail:agent_No <> 0
        If bopGENERAL:RATING_TERRITORY_GROUP = 1 Then
            bopGENERAL:RATING_TERRITORY_FACTOR = L_GROUP_1 ;
403     begin
        if function one of "ADD", "NEW", "CHG", "CHANGE" then
            begin
            if l_group_2 <> 0 then
                bopgeneral:territory_factors[2] = l_group_2
            else
                bopgeneral:territory_factors[2] = l_group_1
            end
        end
        l_group_2/displayonly
        hide if bopgeneral:state one of 29
        hide if sfsemail:agent_no <> 0 ;

501     bopGENERAL:RATING_TERRITORY_FACTOR
        hide if bopgeneral:state not one of 29
        Hide If bopGENERAL:RATING_TERRITORY_GROUP <> 2
        hide if sfsemail:agent_No <> 0 ;
501     bopGENERAL:RATING_TERRITORY_FACTOR
        hide if bopgeneral:state one of 29
        Hide If bopGENERAL:RATING_TERRITORY_GROUP <> 2
        hide if sfsemail:agent_No <> 0 ;
502     bopGENERAL:territory_factors[2]
        hide if bopgeneral:state one of 29
        Hide If bopGENERAL:RATING_TERRITORY_GROUP <> 2
        hide if sfsemail:agent_No <> 0 ;

701     bopgeneral:special_exposure/checkbox/values="0,1"
        hide if bopgeneral:state not one of 29 ;
702     begin
        Access BPSRATINGTERR, Set BPSRATINGTERR:COMPANY_ID = bopgeneral:COMPANY_ID,
                                  BPSRATINGTERR:STATE = bopGENERAL:STATE,
                                  BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS,
                                  BPSRATINGTERR:COUNTY = bopGENERAL:COUNTY, generic

        while BPSRATINGTERR:COMPANY_ID       = bopgeneral:COMPANY_ID and
              BPSRATINGTERR:STATE            = bopGENERAL:STATE and
              BPSRATINGTERR:LINE_OF_BUSINESS = bopgeneral:LINE_OF_BUSINESS and
              BPSRATINGTERR:COUNTY           = bopGENERAL:COUNTY
                begin
                if (l_eff_date >= bpsratingterr:eff_date and
                   (l_eff_date <= bpsratingterr:exp_date or
                   bpsratingterr:exp_date = 0)) then
                    begin
                    if bpsratingterr:special_exposure = 1 then
                        bopgeneral:special_exposure_factor = bpsratingterr:group_1
                    end

                next bpsratingterr
                end
        end
        bopgeneral:special_exposure_factor/displayonly
        hide if bopgeneral:special_exposure = 0 ;
901     begin
        if bopgeneral:special_exposure = 0 then
            bopgeneral:special_exposure_factor = 1.00
        end
        bopgeneral:stories ;
902     bopgeneral:no_units ;

}

panel tagged final_rating
Properties
        {
        scrollbarpolicy = asneeded
        text            = "Location Totals"
        }
{
%%

%%

components
        subscreen at 1,1 to 30,85
                Properties
                        {
                        screen = "bopmt011"
                        }

}

}

}

Update
If UPDATEOK = "YES" And
   Abort = "NO" Then
    Begin
    if function one of "ADD", "NEW", "CHANGE", "CHG" then
        do update_triggers

    if function one of "delete", "DELETE" and
       sfsline:lob_code not one of "CPORTFOLIO" then
        begin
        access sfplocation, set sfplocation:policy_no = bopgeneral:policy_no,
                                sfplocation:pol_year = bopgeneral:pol_year,
                                sfplocation:end_sequence = bopgeneral:end_sequence,
                                sfplocation:prem_no  = bopgeneral:prem_no,
                                sfplocation:build_no = bopgeneral:build_no, generic

        if sfplocation:policy_no = bopgeneral:policy_no and
           sfplocation:pol_year = bopgeneral:pol_year and
           sfplocation:end_sequence = bopgeneral:end_sequence and
           sfplocation:prem_no  = bopgeneral:prem_no and
           sfplocation:build_no = bopgeneral:build_no then
            delete sfplocation

        access sfpend, set sfpend:policy_no = bopgeneral:policy_no,
                           sfpend:pol_year = bopgeneral:pol_year,
                           sfpend:end_sequence = bopgeneral:end_sequence,
                           sfpend:prem_no  = bopgeneral:prem_no,
                           sfpend:build_no = bopgeneral:build_no, generic

        while sfpend:policy_no = bopgeneral:policy_no and
              sfpend:pol_year = bopgeneral:pol_year and
              sfpend:end_sequence = bopgeneral:end_sequence and
              sfpend:prem_no  = bopgeneral:prem_no and
              sfpend:build_no = bopgeneral:build_no
                begin
                delete sfpend

                next sfpend
                end

        g_prem_no  = 1
        g_build_no = 1
        do update_final_rating
        function   = "redisplay"
        end

    If L_DELETE_NONOWNED_HIRED = "Y" Then
        Begin
        if sfsline:lob_code = "CPORTFOLIO" then
            begin
            Access sfpmastsupp, Set sfpmastsupp:policy_NO        = G_policy_NO,
                                    sfpmastsupp:pol_year         = g_year,
                                    sfpmastsupp:end_sequence     = g_end_sequence,
                                    sfpmastsupp:line_of_business = g_line_of_business, Exact

            If sfpmastsupp:policy_NO        = G_policy_NO and
               sfpmastsupp:pol_year         = g_year and
               sfpmastsupp:end_sequence     = g_end_sequence and
               sfpmastsupp:line_of_business = g_line_of_business Then
                Change sfpmastsupp
                    Begin
                    sfpmastsupp:DELETE_HIRED_NONOWNED = "Y"
                    sfpmastsupp:DELETE_NONOWNED_HIRED_CLASS = "Y"
                    sfpmastsupp:EXTEND_HIRED_NONOWNED = "N"
                    End
            end
        else
            begin
            Access sfpMASTER, Set sfpMASTER:policy_NO    = G_policy_NO,
                                  sfpmaster:pol_year     = g_year,
                                  sfpmaster:end_sequence = g_end_sequence, Exact

            If sfpMASTER:policy_NO    = G_policy_NO and
               sfpmaster:pol_year     = g_year and
               sfpmaster:end_sequence = g_end_sequence Then
                Change sfpMASTER
                    Begin
                    sfpMASTER:DELETE_HIRED_NONOWNED = "Y"
                    sfpMASTER:DELETE_NONOWNED_HIRED_CLASS = "Y"
                    sfpMASTER:EXTEND_HIRED_NONOWNED = "N"
                    End
            end
        End

    if function one of "NEW", "ADD" then
        begin
        if sfpname:company_id = "LEBINS" then
            begin
            display modal screen "bopmt10b"
            with initial function "CHANGE|BACK"
            end
        else
        if sfpname:company_id one of "FLEMINGTON" then
            begin
            display modal screen "bopmt10m"
            with initial function "CHANGE|BACK"
            end
        else
        if sfpname:company_id one of "DELOS", "GGUND" then
            begin
            display modal screen "bopmt10n"
            with initial function "CHANGE|BACK"
            end
        else
        if sfpname:company_id = "NWIC" and
           bopgeneral:state = 29 then
            begin
            display modal screen "bopmt10g"
            with initial function "CHANGE|BACK"
            end
        else
            begin
            display modal screen "bopmt10a"
            with initial function "CHANGE|BACK"
            end
        if ((sfscompany:boiler_rating <> 4 and
           sfpname:company_id not one of "NWIC", "FARMERS") or
           (sfpname:company_id one of "NWIC", "FARMERS" and
           bopgeneral:state = 29)) then
            begin
            display modal screen "sfpmt004"
            with initial function "ADD|BACK"
            end
        end

    If L_DELETE_NONOWNED_HIRED = "N" Then
        Begin
        if sfsline:lob_code = "CPORTFOLIO" then
            begin
            Access sfpmastsupp, Set sfpmastsupp:policy_NO        = G_policy_NO,
                                    sfpmastsupp:pol_year         = g_year,
                                    sfpmastsupp:end_sequence     = g_end_sequence,
                                    sfpmastsupp:line_of_business = g_line_of_business, Exact

            If sfpmastsupp:policy_NO        = G_policy_NO and
               sfpmastsupp:pol_year         = g_year and
               sfpmastsupp:end_sequence     = g_End_sequence and
               sfpmastsupp:line_of_business = g_line_of_business Then
                Begin
            -- only put to "N" if class code changed, and original set because
            -- class code called for this option to be deleted
                If sfpmastsupp:DELETE_NONOWNED_HIRED_CLASS = "Y" Then
                    Change sfpmastsupp
                        Begin
                        sfpmastsupp:DELETE_HIRED_NONOWNED = "N"
                        sfpmastsupp:DELETE_NONOWNED_HIRED_CLASS = "N"
                        End
                End
            end
        else
            begin
            Access sfpMASTER, Set sfpMASTER:policy_NO    = G_policy_NO,
                                  sfpmaster:pol_year     = g_year,
                                 sfpmaster:end_sequence = g_end_sequence, Exact

            If sfpMASTER:policy_NO    = G_policy_NO and
               sfpmaster:pol_year     = g_year and
               sfpmaster:end_sequence = g_End_sequence Then
                Begin
            -- only put to "N" if class code changed, and original set because
            -- class code called for this option to be deleted
                If sfpMASTER:DELETE_NONOWNED_HIRED_CLASS = "Y" Then
                    Change sfpMASTER
                        Begin
                        sfpMASTER:DELETE_HIRED_NONOWNED = "N"
                        sfpMASTER:DELETE_NONOWNED_HIRED_CLASS = "N"
                        End
                End
            end
        End

    Access sfpNAME, Set sfpNAME:policy_NO    = G_policy_NO,
                        sfpname:pol_year     = g_Year,
                        sfpname:end_sequence = g_end_sequence, Exact

    Access bopGENERAL_ALIAS, Set bopGENERAL_ALIAS:policy_NO    = G_policy_NO,
                                 bopgeneral_alias:pol_year     = G_year,
                                 bopgeneral_alias:end_sequence = g_End_sequence,
                                 bopGENERAL_ALIAS:PREM_NO      = G_PREM_NO,
                                 bopGENERAL_ALIAS:BUILD_NO     = G_BUILD_NO, Generic

    Access SFSLINE, Set SFSLINE:COMPANY_ID       = sfpNAME:COMPANY_ID,
                        SFSLINE:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                        SFSLINE:LOB_SUBLINE      = "00", Generic

    l_company_id = sfpname:company_id
    access bpssupplemental, set bpssupplemental:company_id       = l_company_id,
                                bpssupplemental:state            = bopgeneral_alias:state,
                                bpssupplemental:line_of_business = bopgeneral:line_of_business, generic

    l_code_1 = ""
    while bpssupplemental:company_id       = l_company_id and
          bpssupplemental:state            = bopgeneral_alias:state and
          bpssupplemental:line_of_business = bopgeneral_alias:line_of_business
        begin
        if sfpname:eff_date >= bpssupplemental:eff_date then
            begin
            l_code_1 = bpssupplemental:code
            end

        next bpssupplemental
        end

    if l_code_1 <> "" then
        begin
        l_code = l_code_1
        do access_sfpend
        if l_add_endorsement = "Y" and
           bopgeneral_alias:special_enhancement = 1 then
            do add_sfpend
        else
        if l_add_endorsement = "N" and
           bopgeneral_alias:special_enhancement = 0 then
            do delete_sfpend
        end

    Access bpssupplemental, Set bpssupplemental:COMPANY_ID       = bopgeneral:company_id,
                                bpssupplemental:state            = bopgeneral:state,
                                bpssupplemental:LINE_OF_BUSINESS = bopgeneral:line_of_business, generic

    l_bpssupplemental_eff_date = 0
    while bpssupplemental:company_id       = bopgeneral:company_id and
          bpssupplemental:state            = bopgeneral:state and
          bpssupplemental:line_of_business = bopgeneral:line_of_business
            begin
            if sfpname:eff_date >= bpssupplemental:eff_date then
                begin
                l_bpssupplemental_eff_date = bpssupplemental:eff_date
                end

            next bpssupplemental
            end

    Access bpssupplemental, Set bpssupplemental:COMPANY_ID       = bopgeneral:company_id,
                                bpssupplemental:state            = bopgeneral:state,
                                bpssupplemental:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                                bpssupplemental:eff_date         = l_bpssupplemental_eff_date, generic

    Access BPSDEFAULT, Set BPSDEFAULT:COMPANY_ID       = sfpNAME:COMPANY_ID,
                           BPSDEFAULT:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                           BPSDEFAULT:FORM             = L_FORM, Generic

    l_code_1 = ""
    l_code_2 = ""
    l_code_3 = ""
    l_code_8 = ""
    l_code_9 = ""
    If SFSLINE:OPTION = "P" and
       sfpname:company_id not one of "DELOS", "GGUND" Then
        Begin
        L_CODE_1 = BPSDEFAULT:COMPUTER_CODE
        L_CODE_2 = BPSDEFAULT:EMPLOYEE_DIS_CODE
        L_CODE_3 = BPSDEFAULT:INDOOR_GLASS_CODE
        L_CODE_8 = BPSDEFAULT:COMPUTER_HACKING
        l_code_9 = bpsdefault:computer_code_1

        If L_CODE_1 <> "" Then
            Begin
            -- computer
            if l_code_9 <> "" and
               sfpname:eff_date >= bpsdefault:computer_code_1_eff_date then
                l_code = l_code_9
            else
                L_CODE = L_CODE_1
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                Do ADD_sfpEND
                if bopgeneral:special_enhancement = 1 then
                    begin
                    l_computer_limit = bopgeneral:property_limit * (bpssupplemental:computer_hardware_percent divide 100)
                    if bpssupplemental:computer_coverage_hardware > l_computer_limit then
                        L_COMPUTER_LIMIT   = bpssupplemental:computer_coverage_hardware
                    l_computer_limit_1 = bopgeneral:property_limit * (bpssupplemental:computer_software_percent divide 100)
                    if bpssupplemental:computer_coverage_media > l_computer_limit_1 then
                        l_computer_limit_1 = bpssupplemental:computer_coverage_media
                    l_computer_limit_2 = bopgeneral:property_limit * (bpssupplemental:extra_expense_percent divide 100)
                    if bpssupplemental:extra_expense_limit > l_computer_limit_2 then
                        l_computer_limit_2 = bpssupplemental:extra_expense_limit
                    end
                else
                    begin
                    l_computer_limit = bopgeneral:property_limit * (bpsdefault1:computer_hardware_percent divide 100)
                    if bpsdefault1:computer_hardware_limit > l_computer_limit then
                        L_COMPUTER_LIMIT   = bpsdefault1:computer_hardware_limit
                    l_computer_limit_1 = bopgeneral:property_limit * (bpsdefault1:computer_software_percent divide 100)
                    if bpsdefault1:computer_software_limit > l_computer_limit_1 then
                        l_computer_limit_1 = bpsdefault1:computer_software_limit
                    l_computer_limit_2 = bopgeneral:property_limit * (bpsdefault1:extra_expense_percent divide 100)
                    if bpsdefault1:extra_expense_limit > l_computer_limit_2 then
                        l_computer_limit_2 = bpsdefault1:extra_expense_limit
                    end

                L_COMPUTER_DESC = BPSDEFAULT:COMPUTER_hardware
                l_computer_desc_1 = bpsdefault:computer_software
                Do ADD_COMPUTER_INFO
                End
            If L_ADD_ENDORSEMENT = "N" Then
                Begin
                if bopgeneral:special_enhancement = 1 then
                    begin
                    l_computer_limit = bopgeneral:property_limit * (bpssupplemental:computer_hardware_percent divide 100)
                    if bpssupplemental:computer_coverage_hardware > l_computer_limit then
                        L_COMPUTER_LIMIT   = bpssupplemental:computer_coverage_hardware
                    l_computer_limit_1 = bopgeneral:property_limit * (bpssupplemental:computer_software_percent divide 100)
                    if bpssupplemental:computer_coverage_media > l_computer_limit_1 then
                        l_computer_limit_1 = bpssupplemental:computer_coverage_media
                    l_computer_limit_2 = bopgeneral:property_limit * (bpssupplemental:extra_expense_percent divide 100)
                    if bpssupplemental:extra_expense_limit > l_computer_limit_2 then
                        l_computer_limit_2 = bpssupplemental:extra_expense_limit
                    end
                else
                    begin
                    l_computer_limit = bopgeneral:property_limit * (bpsdefault1:computer_hardware_percent divide 100)
                    if bpsdefault1:computer_hardware_limit > l_computer_limit then
                        L_COMPUTER_LIMIT   = bpsdefault1:computer_hardware_limit
                    l_computer_limit_1 = bopgeneral:property_limit * (bpsdefault1:computer_software_percent divide 100)
                    if bpsdefault1:computer_software_limit > l_computer_limit_1 then
                        l_computer_limit_1 = bpsdefault1:computer_software_limit
                    l_computer_limit_2 = bopgeneral:property_limit * (bpsdefault1:extra_expense_percent divide 100)
                    if bpsdefault1:extra_expense_limit > l_computer_limit_2 then
                        l_computer_limit_2 = bpsdefault1:extra_expense_limit
                    end

                L_COMPUTER_DESC = BPSDEFAULT:COMPUTER_hardware
                l_computer_desc_1 = bpsdefault:computer_software
                if sfpname:company_id = "FLEMINGTON" then
                    do change_computer_info_ficof
                else
                    Do CHANGE_COMPUTER_INFO
                End
            End

        If L_CODE_2 <> "" Then
            Begin
            -- employee dishonesty
            L_CODE = L_CODE_2
            if sfscompany:boiler_rating one of 4 and
               sfsline:option = "P" then
                do access_sfpend_1
            else
                Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                if sfscompany:boiler_rating one of 4 and
                   sfsline:option = "P" then
                    begin
                    Do ADD_sfpEND_1
                    L_EMPLOYEE_LIMIT = BPSDEFAULT:EMPLOYEE_DISHONESTY
                    Do ADD_EMPLOYEE_DIS_INFO_1
                    end
                else
                    begin
                    Do ADD_sfpEND
                    if bopgeneral:special_enhancement = 1 then
                        l_employee_limit = bpssupplemental:employee_dishonesty
                    else
                        L_EMPLOYEE_LIMIT = BPSDEFAULT:EMPLOYEE_DISHONESTY
                    Do ADD_EMPLOYEE_DIS_INFO
                    end
                End
            End

        If L_CODE_3 <> "" Then
            Begin
            -- indoor glass
            L_CODE = L_CODE_3
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                Do ADD_sfpEND
                if bopgeneral:special_enhancement = 1 then
                    begin
                    l_glass_limit = (bopgeneral_alias:property_limit *
                                    (bpssupplemental:indoor_glass_percent divide 100))
                    if l_glass_limit < bpssupplemental:indoor_glass_limit then
                        l_glass_limit = bpssupplemental:indoor_glass_limit
                    end
                else
                    begin
                    L_GLASS_LIMIT = (bopGENERAL_ALIAS:PROPERTY_LIMIT *
                                    (BPSDEFAULT:INDOOR_GLASS_PERCENT Divide 100))
                    If L_GLASS_LIMIT < BPSDEFAULT:INDOOR_GLASS_LIMIT Then
                    L_GLASS_LIMIT = BPSDEFAULT:INDOOR_GLASS_LIMIT
                    end
                Do ADD_INDOOR_GLASS_INFO
                End
            If L_ADD_ENDORSEMENT = "N" Then
                Begin
                if bopgeneral:special_enhancement = 1 then
                    begin
                    l_glass_limit = (bopgeneral_alias:property_limit *
                                    (bpssupplemental:indoor_glass_percent divide 100))
                    if l_glass_limit < bpssupplemental:indoor_glass_limit then
                        l_glass_limit = bpssupplemental:indoor_glass_limit
                    end
                else
                    begin
                    L_GLASS_LIMIT = (bopGENERAL_ALIAS:PROPERTY_LIMIT *
                                    (BPSDEFAULT:INDOOR_GLASS_PERCENT Divide 100))
                    If L_GLASS_LIMIT < BPSDEFAULT:INDOOR_GLASS_LIMIT Then
                        L_GLASS_LIMIT = BPSDEFAULT:INDOOR_GLASS_LIMIT
                    end
                Do CHANGE_INDOOR_GLASS_INFO
                End
            End

        If L_CODE_8 <> "" Then
            Begin
            -- computer hacking
            L_CODE = L_CODE_8
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                Do ADD_sfpEND
                End
            End

        End
    else
        begin
        L_CODE_1 = BPSDEFAULT:COMPUTER_CODE
        L_CODE_2 = BPSDEFAULT:EMPLOYEE_DIS_CODE
        L_CODE_8 = BPSDEFAULT:COMPUTER_HACKING
        l_code_11 = bpsdefault:water_damage_code

        If L_CODE_1 <> "" and
           bopgeneral_alias:special_enhancement = 1 then
            Begin
            -- computer
            L_CODE = L_CODE_1
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                Do ADD_sfpEND
                L_COMPUTER_LIMIT   = BPSDEFAULT:COMPUTER_LIMIT
                l_computer_limit_1 = bpsdefault:computer_limit_1
                L_COMPUTER_DESC    = BPSDEFAULT:COMPUTER_hardware
                l_computer_desc_1  = bpsdefault:computer_software
                l_computer_limit_2 = 0
                Do ADD_COMPUTER_INFO
                End
            End

        If L_CODE_2 <> "" and
           bopgeneral_alias:special_enhancement = 1 then
            Begin
            -- employee dishonesty
            L_CODE = L_CODE_2
            do access_sfpend
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                do add_sfpend
                L_EMPLOYEE_LIMIT = BPSDEFAULT:EMPLOYEE_DISHONESTY
                Do ADD_EMPLOYEE_DIS_INFO
                End
            End

        If L_CODE_8 <> "" and
           bopgeneral_alias:special_enhancement = 1 then
            Begin
            -- computer hacking
            L_CODE = L_CODE_8
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                Do ADD_sfpEND
                End
            End

        If L_CODE_11 <> "" and
           bopgeneral_alias:special_enhancement = 1 then
            Begin
            -- BU5003 - water damage code
            L_CODE = L_CODE_11
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" Then
                Begin
                Do ADD_sfpEND
                End
            End

        end

        Access BPSCREDITS, Set BPSCREDITS:COMPANY_ID = bopGENERAL:COMPANY_ID,
                               BPSCREDITS:STATE = bopGENERAL:STATE,
                               BPSCREDITS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS, Generic

        Repeat Begin
            Exit If BPSCREDITS:COMPANY_ID <> bopGENERAL:COMPANY_ID Or
                    BPSCREDITS:STATE <> bopGENERAL:STATE Or
                    BPSCREDITS:LINE_OF_BUSINESS <> bopGENERAL:LINE_OF_BUSINESS

            If sfpNAME:EFF_DATE >= BPSCREDITS:EFF_DATE Then
                Begin
                L_CODE_1 = BPSCREDITS:ALARM_CODE[1]
                L_CODE_2 = BPSCREDITS:ALARM_CODE[2]
                End

        Next BPSCREDITS
        End

        If L_CODE_1 <> "" Then
            Begin
            -- burglary
            L_CODE = L_CODE_1
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" And
               bopGENERAL:ALARM_OPTION[2] = "Y" Then
                Do ADD_sfpEND
            If L_ADD_ENDORSEMENT = "N" And
               bopGENERAL:ALARM_OPTION[2] = "N" Then
                Do DELETE_sfpEND
            End

        If L_CODE_2 <> "" Then
            Begin
            -- fire alarm
            L_CODE = L_CODE_2
            Do ACCESS_sfpEND
            If L_ADD_ENDORSEMENT = "Y" And
               bopGENERAL:ALARM_OPTION[1] = "Y" Then
                Do ADD_sfpEND
            If L_ADD_ENDORSEMENT = "N" And
               bopGENERAL:ALARM_OPTION[1] = "N" Then
                begin
                Do DELETE_sfpEND
                end
            End

    access sfpepl, set sfpepl:policy_no    = g_policy_no,
                       sfpepl:pol_year     = g_year,
                       sfpepl:end_sequence = g_end_sequence, generic

    l_company_id       = bopgeneral_alias:company_id
    l_state            = bopgeneral_alias:state
    l_line_of_business = bopgeneral_alias:line_of_business
    Access BPSEPL, Set BPSEPL:COMPANY_ID       = l_company_id,
                       BPSEPL:STATE            = l_STATE,
                       BPSEPL:LINE_OF_BUSINESS = l_line_of_business,
                       bpsepl:limit            = sfpepl:epl_limit,
                       bpsepl:deductible       = sfpepl:epl_deductible, Generic

    l_code_1 = ""
    l_code_2 = ""
    l_code_3 = ""
    while BPSEPL:COMPANY_ID       = l_company_id and
          BPSEPL:STATE            = l_STATE and
          BPSEPL:LINE_OF_BUSINESS = l_line_of_business and
          bpsepl:limit            = sfpepl:epl_limit and
          bpsepl:deductible       = sfpepl:epl_deductible
        begin
        If sfpNAME:EFF_DATE >= BPSEPL:EFF_DATE Then
            Begin
            l_code_1 = bpsepl:code[1]
            l_code_2 = bpsepl:code[2]
            l_code_3 = bpsepl:code1[1]
            End

        Next BPSEPL
        End

    If L_CODE_1 <> "" Then
        Begin
        L_CODE = L_CODE_1
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           sfpepl:EPL_LIMIT <> 0 Then
            Do ADD_sfpEND_1
        else
        If L_ADD_ENDORSEMENT = "N" And
           sfpepl:EPL_LIMIT = 0 Then
            Do DELETE_sfpEND_1
        End

    If L_CODE_2 <> "" Then
        Begin
        L_CODE = L_CODE_2
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           sfpepl:EPL_LIMIT <> 0 Then
            Do ADD_sfpEND_1
        else
        If L_ADD_ENDORSEMENT = "N" And
           sfpepl:EPL_LIMIT = 0 Then
            Do DELETE_sfpEND_1
        End

    If L_CODE_3 <> "" Then
        Begin
        L_CODE = L_CODE_3
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           sfpepl:EPL_LIMIT <> 0 and
           bopgeneral:state = 19 Then
            Do ADD_sfpEND_1
        else
        If ((L_ADD_ENDORSEMENT = "N" And
           sfpepl:EPL_LIMIT = 0) or
           (l_add_endorsement = "N" and
           bopgeneral:state <> 19)) Then
            Do DELETE_sfpEND_1
        End

    End

Screen Exit
g_state = bopgeneral:state ;

Procedure Definition

procedure update_endorsements
begin
    access sfpepl, set sfpepl:policy_no    = g_policy_no,
                       sfpepl:pol_year     = g_year,
                       sfpepl:end_sequence = g_end_sequence, generic

    l_company_id       = bopgeneral:company_id
    l_state            = bopgeneral:state
    l_line_of_business = bopgeneral:line_of_business
    Access BPSEPL, Set BPSEPL:COMPANY_ID       = l_company_id,
                       BPSEPL:STATE            = l_STATE,
                       BPSEPL:LINE_OF_BUSINESS = l_line_of_business,
                       bpsepl:limit            = sfpepl:epl_limit,
                       bpsepl:deductible       = sfpepl:epl_deductible, Generic

    l_code_1 = ""
    l_code_2 = ""
    l_code_3 = ""
    while BPSEPL:COMPANY_ID       = l_company_id and
          BPSEPL:STATE            = l_STATE and
          BPSEPL:LINE_OF_BUSINESS = l_line_of_business and
          bpsepl:limit            = sfpepl:epl_limit and
          bpsepl:deductible       = sfpepl:epl_deductible
        begin
        If sfpNAME:EFF_DATE >= BPSEPL:EFF_DATE Then
            Begin
            l_code_1 = bpsepl:code[1]
            l_code_2 = bpsepl:code[2]
            l_code_3 = bpsepl:code1[1]
            End

        Next BPSEPL
        End

    If L_CODE_1 <> "" Then
        Begin
        L_CODE = L_CODE_1
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           sfpepl:EPL_LIMIT <> 0 Then
            Do ADD_sfpEND_1
        else
        If L_ADD_ENDORSEMENT = "N" And
           sfpepl:EPL_LIMIT = 0 Then
            Do DELETE_sfpEND_1
        End

    If L_CODE_2 <> "" Then
        Begin
        L_CODE = L_CODE_2
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           sfpepl:EPL_LIMIT <> 0 Then
            Do ADD_sfpEND_1
        else
        If L_ADD_ENDORSEMENT = "N" And
           sfpepl:EPL_LIMIT = 0 Then
            Do DELETE_sfpEND_1
        End

    If L_CODE_3 <> "" Then
        Begin
        L_CODE = L_CODE_3
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           sfpepl:EPL_LIMIT <> 0 and
           bopgeneral:state = 19 Then
            Do ADD_sfpEND_1
        else
        If ((L_ADD_ENDORSEMENT = "N" And
           sfpepl:EPL_LIMIT = 0) or
           (l_add_endorsement = "N" and
           bopgeneral:state <> 19)) Then
            Do DELETE_sfpEND_1
        End

end

procedure update_triggers
begin
l_state = bopgeneral:state
Access bpsrestaurant, Set bpsrestaurant:COMPANY_ID       = sfpname:COMPANY_ID,
                          bpsrestaurant:STATE            = l_STATE,
                          bpsrestaurant:LINE_OF_BUSINESS = sfpname:LINE_OF_BUSINESS, Generic

while bpsrestaurant:company_id       = sfpname:company_id and
      bpsrestaurant:state            = l_state and
      bpsrestaurant:line_of_business = sfpname:line_of_business
    begin
    If sfpname:EFF_DATE >= bpsrestaurant:EFF_DATE Then
        Begin
        L_CODE_1 = bpsrestaurant:code -- bu0420
        End

    Next bpsrestaurant
    End

If L_CODE_1 <> "" Then
    Begin
    L_CODE = L_CODE_1
    Do ACCESS_sfpEND
    If L_ADD_ENDORSEMENT = "Y" And
       L_restaurant = 1 Then
        Do ADD_sfpEND
    If L_ADD_ENDORSEMENT = "N" And
       L_restaurant = 0 Then
        Do DELETE_sfpEND
    End

Access bpstrigger, Set bpstrigger:COMPANY_ID       = bopgeneral:company_id,
                       bpstrigger:STATE            = bopgeneral:state,
                       bpstrigger:LINE_OF_BUSINESS = bopgeneral:line_of_business, Generic

l_code_1 = ""
l_code_2 = ""
l_code_3 = ""
l_code_4 = ""
l_code_5 = ""
l_code_6 = ""
l_code_7 = ""
while bpstrigger:COMPANY_ID       = bopgeneral:company_id and
      bpstrigger:STATE            = bopgeneral:STATE and
      bpstrigger:LINE_OF_BUSINESS = bopgeneral:line_of_business
    begin
    If sfpNAME:EFF_DATE >= bpstrigger:RATE_DATE Then
        Begin
        L_CODE_1 = bpstrigger:code[8] -- mcp140
        l_code_2 = bpstrigger:code[11] -- mcp250
        l_code_3 = bpstrigger:code[12] -- bu0185
        l_code_4 = bpstrigger:code[13] -- bu2512
        l_code_5 = bpstrigger:code[14] -- bu0242
        l_code_6 = bpstrigger:code[15] -- mcp105
        l_code_7 = bpstrigger:code[10] -- mcn883
        end

    Next bpstrigger
    End

If L_CODE_1 <> "" Then
    Begin
    L_CODE = L_CODE_1
    Do ACCESS_sfpEND
    If L_ADD_ENDORSEMENT = "Y" Then
        begin
        Do ADD_sfpEND
        do add_bopendorse
        end
    End

if l_code_2 <> "" then
    begin
    l_code = l_code_2
    do access_sfpend
    if l_add_endorsement = "Y" and
       bopgeneral:building_limit <> 0 then
        do add_sfpend
    if l_add_endorsement = "N" and
       bopgeneral:building_limit = 0 then
        do delete_sfpend
    end

if l_code_3 <> "" then
    begin
    l_code = l_code_3
    do access_sfpend
    if l_add_endorsement = "Y" and
       bopgeneral:building_limit <> 0 then
        do add_sfpend
    if l_add_endorsement = "N" and
       bopgeneral:building_limit = 0 then
        do delete_sfpend
    end

if l_code_4 <> "" then
    begin
    l_code = l_code_4
    do access_sfpend
    if l_add_endorsement = "Y" and
       bopgeneral:building_limit <> 0 then
        do add_sfpend
    if l_add_endorsement = "N" and
       bopgeneral:building_limit = 0 then
        do delete_sfpend
    end

If L_CODE_5 <> "" Then
    Begin
    L_CODE = L_CODE_5
    Do ACCESS_SFPEND
    If L_ADD_ENDORSEMENT = "Y" and
       bopgeneral:class_code one of 22, 78, 80 then
        begin
        Do ADD_SFPEND
        end
    else
    if l_add_endorsement = "N" and
       bopgeneral:class_code not one of 22, 78, 80 then
        do delete_sfpend
    End

if l_code_6 <> "" then
    begin
    l_code = l_code_6
    do access_sfpend_1
    if l_add_endorsement = "Y" and
       sfsline:option = "S" then
        begin
        do add_sfpend_1
        end
    if l_add_endorsement = "N" and
       sfsline:option <> "S" then
        begin
        do delete_sfpend_1
        end
    end

If L_CODE_7 <> "" Then
    Begin
    L_CODE = L_CODE_7
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" Then
        begin
        Do ADD_sfpEND_1
        do add_bopendorse_1
        end
    End

Access bpsrate, Set bpsrate:COMPANY_ID       = bopgeneral:company_id,
                    bpsrate:STATE            = bopgeneral:state,
                    bpsrate:LINE_OF_BUSINESS = bopgeneral:line_of_business, Generic

l_code_1 = ""
while bpsrate:COMPANY_ID       = bopgeneral:company_id and
      bpsrate:STATE            = bopgeneral:STATE and
      bpsrate:LINE_OF_BUSINESS = bopgeneral:line_of_business
    begin
    If (sfpNAME:EFF_DATE >= bpsrate:eff_date and
       (sfpname:eff_date <= bpsrate:exp_date or
       bpsrate:exp_date = 0)) Then
        Begin
        L_CODE_1 = bpsrate:sprinkler_code
        end

    Next bpsrate
    End

If L_CODE_1 <> "" Then
    Begin
    L_CODE = L_CODE_1
    Do ACCESS_sfpEND
    If L_ADD_ENDORSEMENT = "Y" and
       bopgeneral:sprinklers = "Y" Then
        begin
        Do ADD_sfpEND
        end
    If L_ADD_ENDORSEMENT = "N" and
       bopgeneral:sprinklers = "N" Then
        begin
        Do DELETE_sfpEND
        end
    End

Access BPSRATE, Set BPSRATE:COMPANY_ID       = sfpNAME:COMPANY_ID,
                    BPSRATE:STATE            = g_STATE,
                    BPSRATE:LINE_OF_BUSINESS = sfpNAME:LINE_OF_BUSINESS, Generic

l_code_1 = ""
l_code_2 = ""
while bpsrate:company_id = sfpname:company_id and
      bpsrate:state = g_state and
      bpsrate:line_of_business = sfpname:line_of_business
    begin
    If sfpNAME:EFF_DATE >= BPSRATE:EFF_DATE Then
        Begin
        L_CODE_1 = BPSRATE:HIRED_NONOWNED_CODE[1] -- BU5004
        L_CODE_2 = BPSRATE:HIRED_NONOWNED_CODE[2] -- BU0140
        End

    Next BPSRATE
    End

If L_CODE_1 <> "" Then
    Begin
    -- delete Hired/Nonown
    L_CODE = L_CODE_1
    Do ACCESS_sfpEND
    If L_ADD_ENDORSEMENT = "Y" And
       L_DELETE_NONOWNED_HIRED = "Y" Then
        Do ADD_sfpEND
    If L_ADD_ENDORSEMENT = "N" And
       L_DELETE_NONOWNED_HIRED = "N" Then
        Do DELETE_sfpEND
    End

end

procedure add_bpstrigger
begin
Access bpstrigger, Set bpstrigger:COMPANY_ID       = bopgeneral:company_id,
                       bpstrigger:STATE            = bopgeneral:state,
                       bpstrigger:LINE_OF_BUSINESS = bopgeneral:line_of_business, Generic

l_code_1 = ""
l_code_2 = ""
l_code_3 = ""
l_code_4 = ""
l_code_5 = ""
l_code_6 = ""
while bpstrigger:COMPANY_ID       = bopgeneral:company_id and
      bpstrigger:STATE            = bopgeneral:STATE and
      bpstrigger:LINE_OF_BUSINESS = bopgeneral:line_of_business
    begin
    If sfpNAME:EFF_DATE >= bpstrigger:RATE_DATE Then
        Begin
        L_CODE_1 = bpstrigger:code[10] -- MCN883
--        l_code_2 = bpstrigger:code[11] -- mcp250
--        l_code_3 = bpstrigger:code[12] -- bu0185
--        l_code_4 = bpstrigger:code[13] -- bu2512
--        l_code_5 = bpstrigger:code[14] -- bu0242
        l_code_6 = bpstrigger:code[15] -- mcp105
        end

    Next bpstrigger
    End

If L_CODE_1 <> "" Then
    Begin
    L_CODE = L_CODE_1
    Do ACCESS_sfpEND_1
    If L_ADD_ENDORSEMENT = "Y" Then
        begin
        Do ADD_sfpEND_1
        do add_bopendorse_1
        end
    End

/*if l_code_2 <> "" then
    begin
    l_code = l_code_2
    do access_sfpend
    if l_add_endorsement = "Y" and
       bopgeneral:building_limit <> 0 then
        do add_sfpend
    if l_add_endorsement = "N" and
       bopgeneral:building_limit = 0 then
        do delete_sfpend
    end

if l_code_3 <> "" then
    begin
    l_code = l_code_3
    do access_sfpend
    if l_add_endorsement = "Y" and
       bopgeneral:building_limit <> 0 then
        do add_sfpend
    if l_add_endorsement = "N" and
       bopgeneral:building_limit = 0 then
        do delete_sfpend
    end

if l_code_4 <> "" then
    begin
    l_code = l_code_4
    do access_sfpend
    if l_add_endorsement = "Y" and
       bopgeneral:building_limit <> 0 then
        do add_sfpend
    if l_add_endorsement = "N" and
       bopgeneral:building_limit = 0 then
        do delete_sfpend
    end

If L_CODE_5 <> "" Then
    Begin
    L_CODE = L_CODE_5
    Do ACCESS_SFPEND
    If L_ADD_ENDORSEMENT = "Y" and
       bopgeneral:class_code one of 22, 78, 80 then
        begin
        Do ADD_SFPEND
        end
    else
    if l_add_endorsement = "N" and
       bopgeneral:class_code not one of 22, 78, 80 then
        do delete_sfpend
    End*/

if l_code_6 <> "" then
    begin
    l_code = l_code_6
    do access_sfpend_1
    if l_add_endorsement = "Y" and
       sfsline:option = "S" then
        begin
        do add_sfpend_1
        end
    if l_add_endorsement = "N" and
       sfsline:option <> "S" then
        begin
        do delete_sfpend_1
        end
    end

    Access BPSRATE, Set BPSRATE:COMPANY_ID       = bopgeneral:company_id,
                        BPSRATE:STATE            = bopgeneral:STATE,
                        BPSRATE:LINE_OF_BUSINESS = bopgeneral:line_of_business, Generic

    l_code_1 = ""
    l_code_2 = ""
    Repeat Begin
        Exit If BPSRATE:COMPANY_ID <> bopgeneral:company_id Or
                BPSRATE:STATE <> bopgeneral:STATE Or
                BPSRATE:LINE_OF_BUSINESS <> bopgeneral:line_of_business

        If sfpNAME:EFF_DATE >= BPSRATE:EFF_DATE Then
            Begin
            L_CODE_1 = BPSRATE:BOILERS_CODE
            l_code_2 = bpsrate:boiler_code_1 -- delos has 2 forms for boiler
            End

        Next BPSRATE
        End

    If L_CODE_1 <> "" Then
        Begin
        -- boiler endorsement if answer BU2519 applies
        L_CODE = L_CODE_1
        Do ACCESS_sfpEND
        If L_ADD_ENDORSEMENT = "Y" And
           bopGENERAL_ALIAS:BOILERS = "Y" Then
            Do ADD_sfpEND
        else
        If L_ADD_ENDORSEMENT = "N" And
           bopGENERAL_ALIAS:BOILERS = "N" Then
            Do DELETE_sfpEND
        End

    If L_CODE_2 <> "" Then
        Begin
        -- boiler endorsement if answer mcm025
        L_CODE = L_CODE_2
        Do ACCESS_sfpEND_1
        If L_ADD_ENDORSEMENT = "Y" And
           bopGENERAL_ALIAS:BOILERS = "Y" Then
            Do ADD_sfpEND_1
        else
        If L_ADD_ENDORSEMENT = "N" And
           bopGENERAL_ALIAS:BOILERS = "N" Then
            Do DELETE_sfpEND_1
        End

end

Procedure ADD_bopendorse
Begin
Add bopendorse
    Begin
    bopendorse:policy_NO                  =       G_policy_NO
    bopendorse:pol_year                   =       g_year
    bopendorse:end_sequence               =       g_end_sequence
    bopendorse:PREM_NO                    =       g_prem_no
    bopendorse:BUILD_NO                   =       g_build_no
    bopendorse:code                       =       l_code
    bopendorse:sub_code                   =       10
    bopendorse:LIMIT[1]                   =       l_mcp140_limit
    End

End

Procedure ADD_bopendorse_1
Begin
Add bopendorse
    Begin
    bopendorse:policy_NO                  =       G_policy_NO
    bopendorse:pol_year                   =       g_year
    bopendorse:end_sequence               =       g_end_sequence
    bopendorse:PREM_NO                    =       0
    bopendorse:BUILD_NO                   =       0
    bopendorse:code                       =       l_code
    bopendorse:sub_code                   =       10
    bopendorse:LIMIT[1]                   =       l_mcp140_limit
    End

End

procedure minimum_maximum_limits
begin
access sfsminmax1, set sfsminmax1:company_id       = sfpname:company_id,
                       sfsminmax1:state            = bopgeneral:state,
                       sfsminmax1:line_of_business = bopgeneral:line_of_business,
                       sfsminmax1:form             = l_form,
                       sfsminmax1:class_code       = bopgeneral:class_code, approximate

if bopgeneral:class_code = sfsminmax1:class_code then
    l_class_code = sfsminmax1:class_code
else
    l_class_code = 99999
access sfsminmax1, set sfsminmax1:company_id       = sfpname:company_id,
                       sfsminmax1:state            = bopgeneral:state,
                       sfsminmax1:line_of_business = bopgeneral:line_of_business,
                       sfsminmax1:form             = l_form,
                       sfsminmax1:class_code       = l_class_code, generic

while sfsminmax1:company_id        = sfpname:company_id and
      sfsminmax1:state             = bopgeneral:state and
      sfsminmax1:line_of_business  = bopgeneral:line_of_business and
      sfsminmax1:form              = l_form and
      sfsminmax1:class_code        = l_class_code
        begin
        if (sfpname:eff_date >= sfsminmax1:eff_date and
           (sfpname:eff_date <= sfsminmax1:exp_date or
           sfsminmax1:exp_date = 0)) then
            begin
            l_building_minimum_limit   = sfsminmax1:building_minimum
            l_contents_minimum_limit   = sfsminmax1:contents_minimum
            l_combined_minimum_limit   = sfsminmax1:combined_minimum
            l_building_maximum_limit   = sfsminmax1:building_maximum
            l_contents_maximum_limit   = sfsminmax1:contents_maximum
            l_combined_maximum_limit   = sfsminmax1:combined_maximum
            l_building_binding_limit   = sfsminmax1:building_binding
            l_contents_binding_limit   = sfsminmax1:contents_binding
            l_combined_binding_limit   = sfsminmax1:combined_binding
            l_min_error                = sfsminmax1:give_error[1]
            l_binding_error            = sfsminmax1:give_error[2]
            l_max_error                = sfsminmax1:give_error[3]
            l_minimum_message          = sfsminmax1:minimum_message
            l_combined_minimum_message = sfsminmax1:minimum_combined_message
            l_binding_message          = sfsminmax1:binding_message
            l_combined_binding_message = sfsminmax1:binding_combined_message
            l_maximum_message          = sfsminmax1:maximum_message
            l_combined_maximum_message = sfsminmax1:maximum_combined_message
            l_contact_message          = sfsminmax1:contact_message
            end

        next sfsminmax1
        end

end

procedure add_optional_coverages_bpsdefault2
begin
if sfsline:lob_code = "CPORTFOLIO" then
    begin
    access sfpmastsupp, set sfpmastsupp:policy_no         = g_policy_no,
                            sfpmastsupp:pol_year         = g_year,
                            sfpmastsupp:end_sequence     = g_end_sequence,
                            sfpmastsupp:line_of_business = g_line_of_business, generic

    l_form               = sfpmastsupp:form
    l_off_premises_limit = sfpmastsupp:off_premises_limit
    end
else
    begin
    access sfpmaster, set sfpmaster:policy_no = g_policy_no,
                          sfpmaster:pol_year = g_year,
                          sfpmaster:end_sequence = g_end_sequence, exact

    l_form               = sfpmaster:form
    l_off_premises_limit = sfpmaster:off_premises_limit
    end

switch(l_form)
  case 1, 3 : begin
              if l_restaurant = 1 then
                  l_supplemental_form = "BU0421"/raw
              else
                  l_supplemental_form = "BU0403"/raw
              end
  default   : begin
              if l_restaurant = 1 then
                  l_supplemental_form = "BU0424"/raw
              else
                  l_supplemental_form = "BU0413"/raw
              end
  end

Access BPSDEFAULT2, Set BPSDEFAULT2:COMPANY_ID        = bopgeneral:company_id,
                        bpsdefault2:state             = bopgeneral:state,
                        BPSDEFAULT2:LINE_OF_BUSINESS  = bopgeneral:line_of_business,
                        BPSDEFAULT2:SUPPLEMENTAL_FORM = l_supplemental_form, Generic

l_bpsdefault2_eff_date = 0
while BPSDEFAULT2:COMPANY_ID        = bopgeneral:company_id and
      bpsdefault2:state             = bopgeneral:state and
      BPSDEFAULT2:LINE_OF_BUSINESS  = bopgeneral:line_of_business and
      BPSDEFAULT2:SUPPLEMENTAL_FORM = l_supplemental_form
        begin
        if (sfpname:eff_date >= bpsdefault2:eff_date and
           (sfpname:eff_date <= bpsdefault2:exp_date or
           bpsdefault2:exp_date = 0)) then
            l_bpsdefault2_eff_date = bpsdefault2:eff_date

        next bpsdefault2
        end

Access BPSDEFAULT2, Set BPSDEFAULT2:COMPANY_ID        = bopgeneral:company_id,
                        bpsdefault2:state             = bopgeneral:state,
                        BPSDEFAULT2:LINE_OF_BUSINESS  = bopgeneral:line_of_business,
                        BPSDEFAULT2:SUPPLEMENTAL_FORM = l_supplemental_form,
                        bpsdefault2:eff_date          = l_bpsdefault2_eff_date, Generic

Access SFSLINE_ALIAS, Set SFSLINE_alias:COMPANY_ID       = bopgeneral:company_id,
                          SFSLINE_alias:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                          SFSLINE_alias:LOB_SUBLINE      = "00", Generic

Access BPSDEFAULT, Set BPSDEFAULT:COMPANY_ID       = bopgeneral:company_id,
                       BPSDEFAULT:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                       BPSDEFAULT:FORM             = L_FORM, Generic

Access BPSDEFAULT1, Set BPSDEFAULT1:COMPANY_ID       = bopgeneral:company_id,
                        BPSDEFAULT1:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                        BPSDEFAULT1:FORM             = L_FORM, Generic

access sfsinflation, set sfsinflation:company_id       = bopgeneral:company_id,
                         sfsinflation:state            = bopgeneral:state,
                         sfsinflation:line_of_business = bopgeneral:line_of_business, generic

l_percent = 0
while sfsinflation:company_id       = bopgeneral:company_id and
      sfsinflation:state            = bopgeneral:state and
      sfsinflation:line_of_business = bopgeneral:line_of_business
        begin
        if sfpname:eff_date >= sfsinflation:eff_date then
            begin
            if sfsinflation:make_default = 1 then
                l_percent = sfsinflation:percent

            end

        next sfsinflation
        end

If bopGENERAL:DIFFERENT_OFF_PREMISES = 0 Then
    bopGENERAL:OFF_PREMISES_LIMIT     = L_OFF_PREMISES_LIMIT

if l_percent <> 0 and
   sfpname:company_id = "NWIC" then
    bopgeneral:auto_percent           = l_percent
else
    bopGENERAL:AUTO_PERCENT           = BPSDEFAULT2:AUTO_PERCENT

if bopgeneral:wind_deductible = 0 then
    bopGENERAL:WIND_DEDUCTIBLE        = BPSDEFAULT2:WIND_DEDUCTIBLE

bopGENERAL:LOSS_INCOME_LIMIT          = BPSDEFAULT2:LOSS_INCOME_LIMIT
If bopGENERAL:TENANT = "Y" Then
    bopGENERAL:LIMIT_LOSS_INCOME      = BPSDEFAULT2:LIMIT_LOSS_INCOME
Else
    bopGENERAL:LIMIT_LOSS_INCOME      = "N"
If bopGENERAL:LIMIT_LOSS_INCOME = "" Then
    bopGENERAL:LIMIT_LOSS_INCOME      = "N"
bopGENERAL:DELETE_LOSS_INCOME         = "N"

bopGENERAL:SIGNS_LIMIT                = BPSDEFAULT2:outdoor_signs
If SFSLINE_ALIAS:OPTION = "P" Then
    Begin
    L_EXTERIOR_SIGNS_LIMIT                  = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT2:EXTERIOR_SIGNS_PERCENT
                                              Divide 100))
    If L_EXTERIOR_SIGNS_LIMIT > bopGENERAL:SIGNS_LIMIT Then
        bopGENERAL:SIGNS_LIMIT        = L_EXTERIOR_SIGNS_LIMIT
    End

bopGENERAL:SIGNS_DEDUCTIBLE[1]        = BPSDEFAULT2:outdoor_signs_deductible
bopGENERAL:SIGNS_DEDUCTIBLE[2]        = BPSDEFAULT2:SIGNS_NOT_ATTACHED_DEDUCT

If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM <> 3 Then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON      = BPSDEFAULT2:BURGLARY_LIMIT_ON
    bopGENERAL:BURGLARY_LIMIT_OFF     = BPSDEFAULT2:BURGLARY_LIMIT_OFF
    End

If L_FORM = 3 Or
   bopGENERAL:PROPERTY_LIMIT = 0 Then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON      = 0
    bopGENERAL:BURGLARY_LIMIT_OFF     = 0
    End

If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM = 3 Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON         = BPSDEFAULT2:MONEY_LIMIT_ON
    bopGENERAL:MONEY_LIMIT_OFF        = BPSDEFAULT2:MONEY_LIMIT_OFF
    End

If ((L_FORM <> 3 and
   bopgeneral:attach_bu5001 = "N") Or
   (bopGENERAL:PROPERTY_LIMIT = 0 and
   bopgeneral:attach_bu5001 = "N")) Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON         = 0
    bopGENERAL:MONEY_LIMIT_OFF        = 0
    End

bopGENERAL:AR_LIMIT                   = BPSDEFAULT2:AR_LIMIT
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_AR_LIMIT                              = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT2:AR_PERCENT Divide 100))
    If L_AR_LIMIT > bopGENERAL:AR_LIMIT Then
        bopGENERAL:AR_LIMIT           = L_AR_LIMIT
    End
if bopgeneral:bop_type = 9 and
   sfscompany:boiler_rating = 1 then
    bopgeneral:ar_limit = 0

bopGENERAL:UTILITY_LIMIT              = BPSDEFAULT2:UTILITY_LIMIT
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    Begin
    L_UTILITY_LIMIT                         = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT2:UTILITY_PERCENT Divide 100))
    If L_UTILITY_LIMIT > bopGENERAL:UTILITY_LIMIT Then
        bopGENERAL:UTILITY_LIMIT      = L_UTILITY_LIMIT
    If bopGENERAL:UTILITY_LIMIT > BPSDEFAULT2:UTILITY_MAX and
       bpsdefault2:utility_max <> 0 Then
        bopGENERAL:UTILITY_LIMIT      = BPSDEFAULT2:UTILITY_MAX
    End

bopGENERAL:MECHANICAL_LIMIT           = BPSDEFAULT2:MECHANICAL_breakdown
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    Begin
    L_MECHANICAL_LIMIT                      = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT2:MECHANICAL_PERCENT Divide 100))
    If L_MECHANICAL_LIMIT > bopGENERAL:MECHANICAL_LIMIT Then
        bopGENERAL:MECHANICAL_LIMIT   = L_MECHANICAL_LIMIT
    If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT2:MECHANICAL_MAX and
       bpsdefault2:mechanical_max <> 0 Then
        bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT2:MECHANICAL_MAX
    End

bopGENERAL:CUSTOMER_PROP_LIMIT        = BPSDEFAULT2:CUSTOMERS_PROPERTY_LIMIT
bopGENERAL:POLLUTION_LIMIT            = BPSDEFAULT2:POLLUTION_CLEANUP
bopgeneral:debris_removal_limit       = bpsdefault2:debris_removal_limit
bopGENERAL:VALUABLE_PAPERS_LIMIT      = BPSDEFAULT2:VALUABLE_PAPERS
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_VALUABLE_LIMIT                        = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT2:VALUABLE_PERCENT Divide 100))
    If L_VALUABLE_LIMIT > bopGENERAL:VALUABLE_PAPERS_LIMIT Then
        bopGENERAL:VALUABLE_PAPERS_LIMIT = L_VALUABLE_LIMIT
    End
bopGENERAL:FIRE_LIMIT                 = BPSDEFAULT2:fire_explosion
--bopGENERAL:BUILDING_CODE_LIMIT        = BPSDEFAULT2:BUILDING_CODE_LIMIT
bopGENERAL:BUILDING_CODE_PERCENT      = BPSDEFAULT2:BUILDING_CODE_FACTOR
bopGENERAL:BOILERS                    = BPSDEFAULT2:BOILERS
if sfpname:eff_date >= bpsdefault1:epl_eff_date then
    begin
    if bopgeneral:class_code one of 51 and
       bopgeneral:sub_code one of 60 then
        begin
        access sfpepl, set sfpepl:policy_no = g_policy_no,
                           sfpepl:pol_Year = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no = g_policy_no and
           sfpepl:pol_Year = g_Year and
           sfpepl:end_sequence = g_end_sequence then
            begin
            change sfpepl
                begin
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        else
            begin
            add sfpepl
                begin
                sfpepl:policy_no       = g_policy_no
                sfpepl:pol_Year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        end
    else
        begin
        access sfpepl, set sfpepl:policy_no = g_policy_no,
                           sfpepl:pol_Year = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

/*        if sfpepl:policy_no = g_policy_no then
            begin
            change sfpepl
                begin
                if sfpepl:epl_limit = 0 then
                    sfpepl:epl_limit      = bpsdefault1:epl_limit
                if sfpepl:epl_deductible = 0 then
                    sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end
        else
        */
        if ((sfpepl:policy_no <> g_policy_no or
           sfpepl:pol_Year <> g_year or
           sfpepl:end_sequence <> g_end_sequence) and
           sfpepl:exclude_epl = 0) then
            begin
            add sfpepl
                begin
                sfpepl:policy_no      = g_policy_no
                sfpepl:pol_year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = bpsdefault1:epl_limit
                sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end
        end
    end
bopGENERAL:WATER_BACKUP_LIMITED       = "N"
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    bopGENERAL:WATER_BACKUP_LIMITED   = "Y"
if sfsline_alias:option one of "P", "S" and
   sfscompany:boiler_rating = 4 then
    bopgeneral:water_backup_limited   = "Y"
bopGENERAL:WATER_BACKUP_EXCLUSION     = "N"
bopGENERAL:WATER_BACKUP_LIMIT         = BPSDEFAULT2:water_damage
if sfsline_alias:option <> "P" and
   sfscompany:boiler_rating = 2 then
    bopgeneral:water_backup_limit     = 0
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_SEWER_LIMIT                           = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT2:SEWER_BKUP_PERCENT Divide 100))
    If L_SEWER_LIMIT > bopGENERAL:WATER_BACKUP_LIMIT Then
        bopGENERAL:WATER_BACKUP_LIMIT = L_SEWER_LIMIT
    if bopgeneral:water_backup_limit > 15000 and
       sfscompany:boiler_rating = 2 then
        bopgeneral:water_backup_limit = 15000
    End
bopGENERAL:BALIS                      = BPSDEFAULT2:BALIS
bopGENERAL:SUPPLIES_LIMIT             = BPSDEFAULT2:SUPPLIES_LIMIT
bopGENERAL:WHOLESALER                 = "N"
bopGENERAL:WHOLESALER_PERCENT         = 0
bopGENERAL:BURGLAR_ALARM_SYSTEM       = "N"

access bopgeneral1, set bopgeneral1:policy_no = bopgeneral:policy_no,
                        bopgeneral1:pol_year = bopgeneral:pol_year,
                        bopgeneral1:end_sequence = bopgeneral:end_sequence,
                        bopgeneral1:prem_no  = bopgeneral:prem_no,
                        bopgeneral1:build_no = bopgeneral:build_no, generic

if bopgeneral1:policy_no = bopgeneral:policy_no and
   bopgeneral1:pol_year = bopgeneral:pol_year and
   bopgeneral1:end_sequence = bopgeneral:end_sequence and
   bopgeneral1:prem_no  = bopgeneral:prem_no and
   bopgeneral1:build_no = bopgeneral:build_no then
    begin
    change bopgeneral1
        begin
        bopgeneral1:credit_card        = bpsdefault2:credit_card
        bopgeneral1:electronic_data    = bpsdefault2:electronic_data
        bopgeneral1:dependent_property = bpsdefault2:loss_of_income_dependent
        bopgeneral1:interruption       = bpsdefault2:loss_of_income_interruption
        end
    end
else
    begin
    add bopgeneral1
        begin
        bopgeneral1:policy_no           = bopgeneral:policy_no
        bopgeneral1:pol_year           = bopgeneral:pol_year
        bopgeneral1:end_sequence       = bopgeneral:end_sequence
        bopgeneral1:prem_no            = bopgeneral:prem_no
        bopgeneral1:build_no           = bopgeneral:build_no
        bopgeneral1:credit_card        = bpsdefault2:credit_card
        bopgeneral1:electronic_data    = bpsdefault2:electronic_data
        bopgeneral1:dependent_property = bpsdefault2:loss_of_income_dependent
        bopgeneral1:interruption       = bpsdefault2:loss_of_income_interruption
        end
    end

if bopgeneral:special_enhancement = 1 then
    begin
    Access bpssupplemental, Set bpssupplemental:COMPANY_ID       = bopgeneral:company_id,
                                bpssupplemental:state            = bopgeneral:state,
                                bpssupplemental:LINE_OF_BUSINESS = bopgeneral:line_of_business, generic

    while bpssupplemental:company_id       = bopgeneral:company_id and
          bpssupplemental:state            = bopgeneral:state and
          bpssupplemental:line_of_business = bopgeneral:line_of_business
            begin
            if sfpname:eff_date >= bpssupplemental:eff_date then
                begin
                if sfsline:option = "P" then
                    begin
                    l_ar_limit = bopgeneral:property_limit * (bpssupplemental:ar_percent divide 100)
                    if l_ar_limit > bpssupplemental:ar_limit then
                        bopgeneral:ar_limit               = l_ar_limit
                    else
                        bopGENERAL:AR_LIMIT               = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    l_utility_limit = bopgeneral:property_limit * (bpssupplemental:utility_percent divide 100)
                    if l_utility_limit > bpssupplemental:utility_limit then
                        bopgeneral:utility_limit          = l_utility_limit
                    else
                        bopGENERAL:UTILITY_LIMIT          = bpssupplemental:UTILITY_LIMIT
                    l_mechanical_limit = bopgeneral:property_limit * (bpssupplemental:mechanical_percent divide 100)
                    if l_mechanical_limit > bpssupplemental:mechanical_limit then
                        bopgeneral:mechanical_limit       = l_mechanical_limit
                    else
                        bopGENERAL:MECHANICAL_LIMIT       = bpssupplemental:MECHANICAL_LIMIT
                    If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT2:MECHANICAL_MAX and
                       bpsdefault2:mechanical_max <> 0 Then
                        bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT2:MECHANICAL_MAX
                    l_signs_limit = bopgeneral:property_limit * (bpssupplemental:signs_percent divide 100)
                    if l_signs_limit > bpssupplemental:signs_limit then
                        bopgeneral:signs_limit            = l_signs_limit
                    else
                        bopGENERAL:SIGNS_LIMIT            = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    l_valuable_papers_limit = bopgeneral:property_limit * (bpssupplemental:valuable_papers_percent divide 100)
                    if l_valuable_papers_limit > bpssupplemental:valuable_papers_limit then
                        bopgeneral:valuable_papers_limit  = l_valuable_papers_limit
                    else
                        bopGENERAL:VALUABLE_PAPERS_LIMIT  = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    l_credit_card_limit = bopgeneral:property_limit * (bpssupplemental:credit_card_percent divide 100)
                    if l_credit_card_limit > bpssupplemental:credit_card_limit then
                        bopgeneral:credit_card_limit      = l_credit_card_limit
                    else
                        bopGENERAL:credit_card_LIMIT      = bpssupplemental:credit_card_limit
                    bopgeneral:water_backup_limited = "Y"
                    l_water_limit = bopgeneral:property_limit * (bpssupplemental:water_backup_percent divide 100)
                    if l_water_limit > bpssupplemental:water_backup_limit then
                        bopgeneral:water_backup_limit     = l_water_limit
                    else
                        bopGENERAL:water_backup_LIMIT     = bpssupplemental:water_backup_limit
                    if bopgeneral:water_backup_limit > 15000 and
                       sfscompany:boiler_rating = 2 then
                        bopgeneral:water_backup_limit = 15000
                    end
                else
                    begin
                    bopGENERAL:AR_LIMIT                   = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
    --                bopgeneral:building_glass             = bpssupplemental:building_glass
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    bopGENERAL:UTILITY_LIMIT              = bpssupplemental:UTILITY_LIMIT
                    bopGENERAL:MECHANICAL_LIMIT           = bpssupplemental:MECHANICAL_LIMIT
                    bopGENERAL:SIGNS_LIMIT                = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    bopGENERAL:VALUABLE_PAPERS_LIMIT      = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    bopgeneral:water_backup_limited       = "Y"
                    bopGENERAL:water_backup_LIMIT         = bpssupplemental:water_backup_limit
                    end

               change sfpmaster
                   begin
                   if sfpmaster:medical_limit < bpssupplemental:medical_limit then
                       sfpmaster:medical_limit           = bpssupplemental:medical_limit
                   sfpmaster:off_premises_limit      = bpssupplemental:off_premises_b
                   end
               end

           next bpssupplemental
           end
    end

end

procedure add_optional_coverages
begin
if sfsline:lob_code = "CPORTFOLIO" then
    begin
    Access sfpmastsupp, Set sfpmastsupp:policy_NO        = G_policy_NO,
                            sfpmastsupp:pol_year         = g_year,
                            sfpmastsupp:end_sequence     = g_end_sequence,
                            sfpmastsupp:line_of_business = g_line_of_business, Exact

    l_form               = sfpmastsupp:form
    l_off_premises_limit = sfpmastsupp:off_premises_limit
    end
else
    begin
    Access sfpmaster, Set sfpmaster:policy_NO        = G_policy_NO,
                          sfpmaster:pol_year         = g_year,
                          sfpmaster:end_sequence     = g_end_sequence,  generic

    l_form               = sfpmaster:form
    l_off_premises_limit = sfpmaster:off_premises_limit
    end

Access SFSLINE_ALIAS, Set SFSLINE_alias:COMPANY_ID       = sfpNAME:COMPANY_ID,
                          SFSLINE_alias:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                          SFSLINE_alias:LOB_SUBLINE      = "00", Generic

Access BPSDEFAULT, Set BPSDEFAULT:COMPANY_ID       = sfpNAME:COMPANY_ID,
                       BPSDEFAULT:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                       BPSDEFAULT:FORM             = L_FORM, Generic

access sfsinflation, set sfsinflation:company_id       = bopgeneral:company_id,
                         sfsinflation:state            = bopgeneral:state,
                         sfsinflation:line_of_business = bopgeneral:line_of_business, generic

l_percent = 0
while sfsinflation:company_id       = bopgeneral:company_id and
      sfsinflation:state            = bopgeneral:state and
      sfsinflation:line_of_business = bopgeneral:line_of_business
        begin
        if sfpname:eff_date >= sfsinflation:eff_date then
            begin
            if sfsinflation:make_default = 1 then
                l_percent = sfsinflation:percent

            end

        next sfsinflation
        end

If bopGENERAL:DIFFERENT_OFF_PREMISES = 0 Then
    bopGENERAL:OFF_PREMISES_LIMIT     = L_OFF_PREMISES_LIMIT
if l_percent <> 0 and
   bopgeneral:auto_percent < l_percent then
    bopgeneral:auto_percent           = l_percent
else
    bopGENERAL:AUTO_PERCENT           = BPSDEFAULT:AUTO_PERCENT
if bopgeneral:wind_deductible = 0 then
    bopGENERAL:WIND_DEDUCTIBLE            = BPSDEFAULT:WIND_DEDUCTIBLE
bopGENERAL:LOSS_INCOME_LIMIT          = BPSDEFAULT:LOSS_INCOME_LIMIT
If bopGENERAL:TENANT = "Y" Then
    bopGENERAL:LIMIT_LOSS_INCOME      = BPSDEFAULT:LIMIT_LOSS_INCOME
Else
    bopGENERAL:LIMIT_LOSS_INCOME      = "N"
If bopGENERAL:LIMIT_LOSS_INCOME = "" Then
    bopGENERAL:LIMIT_LOSS_INCOME      = "N"
bopGENERAL:DELETE_LOSS_INCOME         = "N"
bopGENERAL:SIGNS_LIMIT                = BPSDEFAULT:SIGNS_LIMIT
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_EXTERIOR_SIGNS_LIMIT                  = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:EXTERIOR_SIGNS_PERCENT
                                              Divide 100))
    If L_EXTERIOR_SIGNS_LIMIT > bopGENERAL:SIGNS_LIMIT Then
        bopGENERAL:SIGNS_LIMIT        = L_EXTERIOR_SIGNS_LIMIT
    End
bopGENERAL:SIGNS_DEDUCTIBLE[1]        = BPSDEFAULT:SIGNS_DEDUCTIBLE
bopGENERAL:SIGNS_DEDUCTIBLE[2]        = BPSDEFAULT:SIGNS_NOT_ATTACHED_DEDUCT

If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM <> 3 Then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON      = BPSDEFAULT:BURGLARY_LIMIT_ON
    bopGENERAL:BURGLARY_LIMIT_OFF     = BPSDEFAULT:BURGLARY_LIMIT_OFF
    End
If L_FORM = 3 Or
   bopGENERAL:PROPERTY_LIMIT = 0 Then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON      = 0
    bopGENERAL:BURGLARY_LIMIT_OFF     = 0
    End
If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM = 3 Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON         = BPSDEFAULT:MONEY_LIMIT_ON
    bopGENERAL:MONEY_LIMIT_OFF        = BPSDEFAULT:MONEY_LIMIT_OFF
    End
If ((l_FORM <> 3 and
   bopgeneral:attach_bu5001 = "N") Or
   (bopGENERAL:PROPERTY_LIMIT = 0 and
   bopgeneral:attach_bu5001 = "N")) Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON         = 0
    bopGENERAL:MONEY_LIMIT_OFF        = 0
    End
bopGENERAL:AR_LIMIT                   = BPSDEFAULT:AR_LIMIT
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_AR_LIMIT                              = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:AR_PERCENT Divide 100))
    If L_AR_LIMIT > bopGENERAL:AR_LIMIT Then
        bopGENERAL:AR_LIMIT           = L_AR_LIMIT
    End
if bopgeneral:bop_type = 9 and
   sfscompany:boiler_rating = 1 then
    bopgeneral:ar_limit = 0
bopGENERAL:UTILITY_LIMIT              = BPSDEFAULT:UTILITY_LIMIT
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    Begin
    L_UTILITY_LIMIT                         = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:UTILITY_PERCENT Divide 100))
    If L_UTILITY_LIMIT > bopGENERAL:UTILITY_LIMIT Then
        bopGENERAL:UTILITY_LIMIT      = L_UTILITY_LIMIT
    If bopGENERAL:UTILITY_LIMIT > BPSDEFAULT:UTILITY_MAX and
       bpsdefault:utility_max <> 0 Then
        bopGENERAL:UTILITY_LIMIT      = BPSDEFAULT:UTILITY_MAX
    End
bopGENERAL:MECHANICAL_LIMIT           = BPSDEFAULT:MECHANICAL_LIMIT
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    Begin
    L_MECHANICAL_LIMIT                      = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:MECHANICAL_PERCENT Divide 100))
    If L_MECHANICAL_LIMIT > bopGENERAL:MECHANICAL_LIMIT Then
        bopGENERAL:MECHANICAL_LIMIT   = L_MECHANICAL_LIMIT
    If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT:MECHANICAL_MAX and
       bpsdefault:mechanical_max <> 0 Then
        bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT:MECHANICAL_MAX
    End
bopGENERAL:CUSTOMER_PROP_LIMIT        = BPSDEFAULT:CUSTOMER_PROP_LIMIT
bopGENERAL:POLLUTION_LIMIT            = BPSDEFAULT:POLLUTION_LIMIT
bopgeneral:debris_removal_limit       = bpsdefault:debris_removal
bopGENERAL:VALUABLE_PAPERS_LIMIT      = BPSDEFAULT:VALUABLE_PAPERS_LIMIT
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_VALUABLE_LIMIT                        = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:VALUABLE_PERCENT Divide 100))
    If L_VALUABLE_LIMIT > bopGENERAL:VALUABLE_PAPERS_LIMIT Then
        bopGENERAL:VALUABLE_PAPERS_LIMIT = L_VALUABLE_LIMIT
    End
bopGENERAL:FIRE_LIMIT                 = BPSDEFAULT:FIRE_LIMIT
bopGENERAL:BUILDING_CODE_LIMIT        = BPSDEFAULT:BUILDING_CODE_LIMIT
bopGENERAL:BUILDING_CODE_PERCENT      = BPSDEFAULT:BUILDING_CODE_PERCENT
bopGENERAL:BOILERS                    = BPSDEFAULT:BOILERS
if sfpname:eff_date >= bpsdefault1:epl_eff_date then
    begin
    if bopgeneral:class_code one of 51 and
       bopgeneral:sub_code one of 60 then
        begin
        access sfpepl, set sfpepl:policy_no    = g_policy_no,
                           sfpepl:pol_year     = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no    = g_policy_no and
           sfpepl:pol_year     = g_year and
           sfpepl:end_sequence = g_end_sequence then
            begin
            change sfpepl
                begin
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        else
            begin
            add sfpepl
                begin
                sfpepl:policy_no      = g_policy_no
                sfpepl:pol_year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        end
    else
        begin
        access sfpepl, set sfpepl:policy_no    = g_policy_no,
                           sfpepl:pol_year     = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no    <> g_policy_no or
           sfpepl:pol_year     <> g_year or
           sfpepl:end_sequence <> g_end_sequence then
            begin
            add sfpepl
                begin
                sfpepl:policy_no      = g_policy_no
                sfpepl:pol_Year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = bpsdefault1:epl_limit
                sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end
/*        else
            begin
            change sfpepl
                begin
                if sfpepl:epl_limit = 0 then
                    sfpepl:epl_limit      = bpsdefault1:epl_limit
                if sfpepl:epl_deductible = 0 then
                    sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end    */
        end
    end
bopGENERAL:WATER_BACKUP_LIMITED       = "N"
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    bopGENERAL:WATER_BACKUP_LIMITED   = "Y"
if sfsline_alias:option one of "S", "P" and
   sfscompany:boiler_Rating = 4 then
    bopgeneral:water_backup_limited   = "Y"
bopGENERAL:WATER_BACKUP_EXCLUSION     = "N"
bopGENERAL:WATER_BACKUP_LIMIT         = BPSDEFAULT:WATER_BACKUP_LIMIT
if sfsline_alias:option <> "P" and
   sfscompany:boiler_rating = 2 then
    bopgeneral:water_backup_limit = 0
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_SEWER_LIMIT                           = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:SEWER_BKUP_PERCENT Divide 100))
    If L_SEWER_LIMIT > bopGENERAL:WATER_BACKUP_LIMIT Then
        bopGENERAL:WATER_BACKUP_LIMIT = L_SEWER_LIMIT
    if bopgeneral:water_backup_limit > 15000 and
       sfscompany:boiler_rating = 2 then
        bopgeneral:water_backup_limit = 15000
    End
bopGENERAL:BALIS                      = BPSDEFAULT:BALIS
bopGENERAL:SUPPLIES_LIMIT             = BPSDEFAULT:SUPPLIES_LIMIT
bopGENERAL:WHOLESALER                 = "N"
bopGENERAL:WHOLESALER_PERCENT         = 0
bopGENERAL:BURGLAR_ALARM_SYSTEM       = "N"

if bopgeneral:special_enhancement = 1 then
    begin
    Access bpssupplemental, Set bpssupplemental:COMPANY_ID       = bopgeneral:company_id,
                                bpssupplemental:state            = bopgeneral:state,
                                bpssupplemental:LINE_OF_BUSINESS = bopgeneral:line_of_business, generic

    while bpssupplemental:company_id       = bopgeneral:company_id and
          bpssupplemental:state            = bopgeneral:state and
          bpssupplemental:line_of_business = bopgeneral:line_of_business
            begin
            if sfpname:eff_date >= bpssupplemental:eff_date then
                begin
                if sfsline:option = "P" then
                    begin
                    l_ar_limit = bopgeneral:property_limit * (bpssupplemental:ar_percent divide 100)
                    if l_ar_limit > bpssupplemental:ar_limit then
                        bopgeneral:ar_limit               = l_ar_limit
                    else
                        bopGENERAL:AR_LIMIT               = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    l_utility_limit = bopgeneral:property_limit * (bpssupplemental:utility_percent divide 100)
                    if l_utility_limit > bpssupplemental:utility_limit then
                        bopgeneral:utility_limit          = l_utility_limit
                    else
                        bopGENERAL:UTILITY_LIMIT          = bpssupplemental:UTILITY_LIMIT
                    l_mechanical_limit = bopgeneral:property_limit * (bpssupplemental:mechanical_percent divide 100)
                    if l_mechanical_limit > bpssupplemental:mechanical_limit then
                        bopgeneral:mechanical_limit       = l_mechanical_limit
                    else
                        bopGENERAL:MECHANICAL_LIMIT       = bpssupplemental:MECHANICAL_LIMIT
                    If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT:MECHANICAL_MAX and
                       bpsdefault:mechanical_max <> 0 Then
                        bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT:MECHANICAL_MAX
                    l_signs_limit = bopgeneral:property_limit * (bpssupplemental:signs_percent divide 100)
                    if l_signs_limit > bpssupplemental:signs_limit then
                        bopgeneral:signs_limit            = l_signs_limit
                    else
                        bopGENERAL:SIGNS_LIMIT            = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    l_valuable_papers_limit = bopgeneral:property_limit * (bpssupplemental:valuable_papers_percent divide 100)
                    if l_valuable_papers_limit > bpssupplemental:valuable_papers_limit then
                        bopgeneral:valuable_papers_limit  = l_valuable_papers_limit
                    else
                        bopGENERAL:VALUABLE_PAPERS_LIMIT  = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    l_credit_card_limit = bopgeneral:property_limit * (bpssupplemental:credit_card_percent divide 100)
                    if l_credit_card_limit > bpssupplemental:credit_card_limit then
                        bopgeneral:credit_card_limit      = l_credit_card_limit
                    else
                        bopGENERAL:credit_card_LIMIT      = bpssupplemental:credit_card_limit
                    bopgeneral:water_backup_limited       = "Y"
                    l_water_limit = bopgeneral:property_limit * (bpssupplemental:water_backup_percent divide 100)
                    if l_water_limit > bpssupplemental:water_backup_limit then
                        bopgeneral:water_backup_limit     = l_water_limit
                    else
                        bopGENERAL:water_backup_LIMIT     = bpssupplemental:water_backup_limit
                    if bopgeneral:water_backup_limit > 15000 and
                       sfscompany:boiler_rating = 2 then
                        bopgeneral:water_backup_limit = 15000
                    end
                else
                    begin
                    bopGENERAL:AR_LIMIT                   = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
    --                bopgeneral:building_glass             = bpssupplemental:building_glass
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    bopGENERAL:UTILITY_LIMIT              = bpssupplemental:UTILITY_LIMIT
                    bopGENERAL:MECHANICAL_LIMIT           = bpssupplemental:MECHANICAL_LIMIT
                    bopGENERAL:SIGNS_LIMIT                = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    bopGENERAL:VALUABLE_PAPERS_LIMIT      = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    bopgeneral:water_backup_limited       = "Y"
                    bopgeneral:water_backup_limit         = bpssupplemental:water_backup_limit

                    end

                access sfpmaster, set sfpmaster:policY_no = g_policy_no,
                                      sfpmaster:pol_year = g_year,
                                      sfpmaster:end_sequence = g_end_sequence, generic

                change sfpmaster
                    begin
                    if sfpmaster:medical_limit < bpssupplemental:medical_limit then
                        sfpmaster:medical_limit       = bpssupplemental:medical_limit
                    sfpmaster:off_premises_limit      = bpssupplemental:off_premises_b
                    end
                end

           next bpssupplemental
           end
    end

end

procedure change_optional_coverages_bpsdefault2
begin
Access SFSLINE_ALIAS, Set SFSLINE_alias:COMPANY_ID       = bopgeneral:company_id,
                          SFSLINE_alias:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                          SFSLINE_alias:LOB_SUBLINE      = "00", Generic

if sfsline:lob_code = "CPORTFOLIO" then
    begin
    access sfpmastsupp, set sfpmastsupp:policy_no         = g_policy_no,
                            sfpmastsupp:pol_year         = g_year,
                            sfpmastsupp:end_sequence     = g_end_sequence,
                            sfpmastsupp:line_of_business = g_line_of_business, generic

    l_form               = sfpmastsupp:form
    l_off_premises_limit = sfpmastsupp:off_premises_limit
    end
else
    begin
    access sfpmaster, set sfpmaster:policy_no = g_policy_no,
                          sfpmaster:pol_year = g_year,
                          sfpmaster:end_sequence = g_end_sequence, exact

    l_form               = sfpmaster:form
    l_off_premises_limit = sfpmaster:off_premises_limit
    end

switch(l_form)
  case 1, 3 : begin
              if l_restaurant = 1 then
                  l_supplemental_form = "BU0421"
              else
                  l_supplemental_form = "BU0403"
              end
  default   : begin
              if l_restaurant = 1 then
                  l_supplemental_form = "BU0424"
              else
                  l_supplemental_form = "BU0413"
              end
  end

Access BPSDEFAULT2, Set BPSDEFAULT2:COMPANY_ID        = bopgeneral:company_id,
                        bpsdefault2:state             = bopgeneral:state,
                        BPSDEFAULT2:LINE_OF_BUSINESS  = bopgeneral:line_of_business,
                        BPSDEFAULT2:SUPPLEMENTAL_FORM = l_supplemental_form, Generic

l_bpsdefault2_eff_date = 0
while BPSDEFAULT2:COMPANY_ID        = bopgeneral:company_id and
      bpsdefault2:state             = bopgeneral:state and
      BPSDEFAULT2:LINE_OF_BUSINESS  = bopgeneral:line_of_business and
      BPSDEFAULT2:SUPPLEMENTAL_FORM = l_supplemental_form
        begin
        if (sfpname:eff_date >= bpsdefault2:eff_date and
           (sfpname:eff_date <= bpsdefault2:exp_date or
           bpsdefault2:exp_date = 0)) then
            l_bpsdefault2_eff_date = bpsdefault2:eff_date

        next bpsdefault2
        end

Access BPSDEFAULT2, Set BPSDEFAULT2:COMPANY_ID        = bopgeneral:company_id,
                        bpsdefault2:state             = bopgeneral:state,
                        BPSDEFAULT2:LINE_OF_BUSINESS  = bopgeneral:line_of_business,
                        BPSDEFAULT2:SUPPLEMENTAL_FORM = l_supplemental_form,
                        bpsdefault2:eff_date          = l_bpsdefault2_eff_date, Generic

Access BPSDEFAULT, Set BPSDEFAULT:COMPANY_ID = bopgeneral:company_id,
                       BPSDEFAULT:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                       BPSDEFAULT:FORM = L_FORM, Generic

Access BPSDEFAULT1, Set BPSDEFAULT1:COMPANY_ID       = bopgeneral:company_id,
                        BPSDEFAULT1:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                        BPSDEFAULT1:FORM             = L_FORM, Generic

if sfpmaster:medical_limit < bpsdefault2:medical_limit then
begin
change sfpmaster
    begin
    sfpmaster:medical_limit           = bpsdefault2:medical_limit
    end
end
If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM = 3 And
   g_form not one of 3 and
   bopGENERAL:MONEY_LIMIT_ON = 0 Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON = BPSDEFAULT2:MONEY_LIMIT_ON
    bopGENERAL:MONEY_LIMIT_OFF = bpsdefault2:MONEY_LIMIT_OFF
    End
If ((L_FORM <> 3 and
   bopgeneral:attach_bu5001 = "N") Or
   (bopGENERAL:PROPERTY_LIMIT = 0 and
   bopgeneral:attach_bu5001 = "N")) Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON = 0
    bopGENERAL:MONEY_LIMIT_OFF = 0
    End
If ((L_FORM = 3 and
   bopgeneral:attach_bu5001 = "N") Or
   (bopGENERAL:PROPERTY_LIMIT = 0 and
   bopgeneral:attach_bu5001 = "N")) Then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON = 0
    bopGENERAL:BURGLARY_LIMIT_OFF = 0
    End
If bopGENERAL:DIFFERENT_OFF_PREMISES = 0 Then
    bopGENERAL:OFF_PREMISES_LIMIT = L_OFF_PREMISES_LIMIT
if sfpname:eff_date >= bpsdefault1:epl_eff_date then
    begin
    if bopgeneral:class_code one of 51 and
       bopgeneral:sub_code one of 60 then
        begin
        access sfpepl, set sfpepl:policy_no =  g_policy_no,
                           sfpepl:pol_year = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no = g_policy_no and
           sfpepl:pol_year = g_year and
           sfpepl:end_sequence = g_end_sequence then
            begin
            change sfpepl
                begin
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        else
            begin
            add sfpepl
                begin
                sfpepl:policy_no       = g_policy_no
                sfpepl:pol_year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        end
    else
        begin
        access sfpepl, set sfpepl:policy_no = g_policy_no,
                           sfpepl:pol_year = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

/*        if sfpepl:policy_no = g_policy_no then
            begin
            change sfpepl
                begin
                if sfpepl:epl_limit = 0 then
                    sfpepl:epl_limit      = bpsdefault1:epl_limit
                if sfpepl:epl_deductible = 0 then
                    sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end
        else*/
        if ((sfpepl:policy_no <> g_policy_no or
           sfpepl:pol_year <> g_year or
           sfpepl:end_sequence <> g_end_sequence) and
           sfpepl:exclude_epl = 0) then
            begin
            add sfpepl
                begin
                sfpepl:policy_no       = g_policy_no
                sfpepl:pol_year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = bpsdefault1:epl_limit
                sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end
        end
    end
If SFSLINE_ALIAS:OPTION = "P" And
   L_PROPERTY_LIMIT_CHANGE = "Y" Then
    Begin
    bopGENERAL:SIGNS_LIMIT = BPSDEFAULT2:outdoor_signs
    L_EXTERIOR_SIGNS_LIMIT = (L_PROPERTY_LIMIT_1 *
                             (BPSDEFAULT2:EXTERIOR_SIGNS_PERCENT
                             Divide 100))
    If L_EXTERIOR_SIGNS_LIMIT > bopGENERAL:SIGNS_LIMIT Then
        bopGENERAL:SIGNS_LIMIT = L_EXTERIOR_SIGNS_LIMIT

    bopGENERAL:AR_LIMIT = BPSDEFAULT2:AR_LIMIT
    L_AR_LIMIT = (L_PROPERTY_LIMIT_1 *
                (BPSDEFAULT2:AR_PERCENT Divide 100))
    If L_AR_LIMIT > bopGENERAL:AR_LIMIT Then
        bopGENERAL:AR_LIMIT = L_AR_LIMIT

    if bopgeneral:bop_type = 9 and
       sfscompany:boiler_rating = 1 then
        bopgeneral:ar_limit = 0

    bopGENERAL:UTILITY_LIMIT = BPSDEFAULT2:UTILITY_LIMIT
    if sfscompany:boiler_rating <> 4 then
        begin
        L_UTILITY_LIMIT = (L_PROPERTY_LIMIT_1 *
                          (BPSDEFAULT2:UTILITY_PERCENT Divide 100))
        If L_UTILITY_LIMIT > bopGENERAL:UTILITY_LIMIT Then
            bopGENERAL:UTILITY_LIMIT = L_UTILITY_LIMIT
        If bopGENERAL:UTILITY_LIMIT > BPSDEFAULT2:UTILITY_MAX and
           bpsdefault2:utility_max <> 0 Then
            bopGENERAL:UTILITY_LIMIT = BPSDEFAULT2:UTILITY_MAX
        end

    bopGENERAL:MECHANICAL_LIMIT = BPSDEFAULT2:MECHANICAL_breakdown
    if sfscompany:boiler_rating <> 4 then
        begin
        L_MECHANICAL_LIMIT = (L_PROPERTY_LIMIT_1 *
                             (BPSDEFAULT2:MECHANICAL_PERCENT Divide 100))
        If L_MECHANICAL_LIMIT > bopGENERAL:MECHANICAL_LIMIT Then
            bopGENERAL:MECHANICAL_LIMIT = L_MECHANICAL_LIMIT
        If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT2:MECHANICAL_MAX and
           bpsdefault2:mechanical_max <> 0 Then
            bopGENERAL:MECHANICAL_LIMIT = BPSDEFAULT2:MECHANICAL_MAX
        end

    bopGENERAL:VALUABLE_PAPERS_LIMIT = BPSDEFAULT2:VALUABLE_PAPERS
    L_VALUABLE_LIMIT = (L_PROPERTY_LIMIT_1 *
                       (BPSDEFAULT2:VALUABLE_PERCENT Divide 100))
    If L_VALUABLE_LIMIT > bopGENERAL:VALUABLE_PAPERS_LIMIT Then
        bopGENERAL:VALUABLE_PAPERS_LIMIT = L_VALUABLE_LIMIT

    bopGENERAL:WATER_BACKUP_LIMIT = BPSDEFAULT2:WATER_DAMAGE
    if sfsline_alias:option <> "P" and
       sfscompany:boiler_rating = 2 then
        bopgeneral:water_backup_limit     = 0

    L_SEWER_LIMIT = (L_PROPERTY_LIMIT_1 *
                    (BPSDEFAULT2:SEWER_BKUP_PERCENT Divide 100))
    If L_SEWER_LIMIT > bopGENERAL:WATER_BACKUP_LIMIT Then
        bopGENERAL:WATER_BACKUP_LIMIT = L_SEWER_LIMIT
    if bopgeneral:water_backup_limit > 15000 and
       sfscompany:boiler_rating = 2 then
        bopgeneral:water_backup_limit = 15000
    End

access bopgeneral1, set bopgeneral1:policy_no = bopgeneral:policy_no,
                        bopgeneral1:pol_year = bopgeneral:pol_year,
                        bopgeneral1:end_sequence = bopgeneral:end_sequence,
                        bopgeneral1:prem_no  = bopgeneral:prem_no,
                        bopgeneral1:build_no = bopgeneral:build_no, generic

if bopgeneral1:policy_no = bopgeneral:policy_no and
   bopgeneral1:pol_year = bopgeneral:pol_year and
   bopgeneral1:end_sequence = bopgeneral:end_sequence and
   bopgeneral1:prem_no  = bopgeneral:prem_no and
   bopgeneral1:build_no = bopgeneral:build_no then
    begin
    change bopgeneral1
        begin
        bopgeneral1:credit_card        = bpsdefault2:credit_card
        bopgeneral1:electronic_data    = bpsdefault2:electronic_data
        bopgeneral1:dependent_property = bpsdefault2:loss_of_income_dependent
        bopgeneral1:interruption       = bpsdefault2:loss_of_income_interruption
        end
    end
else
    begin
    add bopgeneral1
        begin
        bopgeneral1:policy_no           = bopgeneral:policy_no
        bopgeneral1:pol_year           = bopgeneral:pol_year
        bopgeneral1:end_sequence       = bopgeneral:end_sequence
        bopgeneral1:prem_no            = bopgeneral:prem_no
        bopgeneral1:build_no           = bopgeneral:build_no
        bopgeneral1:credit_card        = bpsdefault2:credit_card
        bopgeneral1:electronic_data    = bpsdefault2:electronic_data
        bopgeneral1:dependent_property = bpsdefault2:loss_of_income_dependent
        bopgeneral1:interruption       = bpsdefault2:loss_of_income_interruption
        end
    end

if bopgeneral:special_enhancement = 1 then
    begin
    Access bpssupplemental, Set bpssupplemental:COMPANY_ID       = bopgeneral:company_id,
                                bpssupplemental:state            = bopgeneral:state,
                                bpssupplemental:LINE_OF_BUSINESS = bopgeneral:line_of_business, generic

    while bpssupplemental:company_id       = bopgeneral:company_id and
          bpssupplemental:state            = bopgeneral:state and
          bpssupplemental:line_of_business = bopgeneral:line_of_business
            begin
            if sfpname:eff_date >= bpssupplemental:eff_date then
                begin
                if sfsline:option = "P" then
                    begin
                    l_ar_limit = bopgeneral:property_limit * (bpssupplemental:ar_percent divide 100)
                    if l_ar_limit > bpssupplemental:ar_limit then
                        bopgeneral:ar_limit               = l_ar_limit
                    else
                        bopGENERAL:AR_LIMIT               = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    l_utility_limit = bopgeneral:property_limit * (bpssupplemental:utility_percent divide 100)
                    if l_utility_limit > bpssupplemental:utility_limit then
                        bopgeneral:utility_limit          = l_utility_limit
                    else
                        bopGENERAL:UTILITY_LIMIT          = bpssupplemental:UTILITY_LIMIT
                    l_mechanical_limit = bopgeneral:property_limit * (bpssupplemental:mechanical_percent divide 100)
                    if l_mechanical_limit > bpssupplemental:mechanical_limit then
                        bopgeneral:mechanical_limit       = l_mechanical_limit
                    else
                        bopGENERAL:MECHANICAL_LIMIT       = bpssupplemental:MECHANICAL_LIMIT
                    If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT2:MECHANICAL_MAX and
                       bpsdefault2:mechanical_max <> 0 Then
                        bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT2:MECHANICAL_MAX
                    l_signs_limit = bopgeneral:property_limit * (bpssupplemental:signs_percent divide 100)
                    if l_signs_limit > bpssupplemental:signs_limit then
                        bopgeneral:signs_limit            = l_signs_limit
                    else
                        bopGENERAL:SIGNS_LIMIT            = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    l_valuable_papers_limit = bopgeneral:property_limit * (bpssupplemental:valuable_papers_percent divide 100)
                    if l_valuable_papers_limit > bpssupplemental:valuable_papers_limit then
                        bopgeneral:valuable_papers_limit  = l_valuable_papers_limit
                    else
                        bopGENERAL:VALUABLE_PAPERS_LIMIT  = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
--                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    l_credit_card_limit = bopgeneral:property_limit * (bpssupplemental:credit_card_percent divide 100)
                    if l_credit_card_limit > bpssupplemental:credit_card_limit then
                        bopgeneral:credit_card_limit      = l_credit_card_limit
                    else
                        bopGENERAL:credit_card_LIMIT      = bpssupplemental:credit_card_limit
                    bopgeneral:water_backup_limited       = "Y"
                    l_water_limit = bopgeneral:property_limit * (bpssupplemental:water_backup_percent divide 100)
                    if l_water_limit > bpssupplemental:water_backup_limit then
                        bopgeneral:water_backup_limit     = l_water_limit
                    else
                        bopGENERAL:water_backup_LIMIT     = bpssupplemental:water_backup_limit
                    if bopgeneral:water_backup_limit > 15000 and
                       sfscompany:boiler_rating = 2 then
                        bopgeneral:water_backup_limit = 15000
                    end
                else
                    begin
                    bopGENERAL:AR_LIMIT                   = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
    --                bopgeneral:building_glass             = bpssupplemental:building_glass
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    bopGENERAL:UTILITY_LIMIT              = bpssupplemental:UTILITY_LIMIT
                    bopGENERAL:MECHANICAL_LIMIT           = bpssupplemental:MECHANICAL_LIMIT
                    bopGENERAL:SIGNS_LIMIT                = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    bopGENERAL:VALUABLE_PAPERS_LIMIT      = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
--                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    bopgeneral:water_backup_limited       = "Y"
                    bopGENERAL:water_backup_LIMIT         = bpssupplemental:water_backup_limit

                    end

               change sfpmaster
                   begin
                   if sfpmaster:medical_limit < bpssupplemental:medical_limit then
                       sfpmaster:medical_limit           = bpssupplemental:medical_limit
                   end
                end

           next bpssupplemental
           end
    end

end

procedure change_optional_coverages_special
begin
if sfsline:lob_code = "CPORTFOLIO" then
    begin
    access sfpmastsupp, set sfpmastsupp:policy_no        = g_policy_no,
                            sfpmastsupp:pol_year         = g_year,
                            sfpmastsupp:end_sequence     = g_end_sequence,
                            sfpmastsupp:line_of_business = g_line_of_business, generic

    l_form               = sfpmastsupp:form
    l_off_premises_limit = sfpmastsupp:off_premises_limit
    end
else
    begin
    access sfpmaster, set sfpmaster:policy_no    = g_policy_no,
                          sfpmaster:pol_Year     = g_year,
                          sfpmaster:end_sequence = g_end_sequence, exact

    l_form               = sfpmaster:form
    l_off_premises_limit = sfpmaster:off_premises_limit
    end

Access SFSLINE_ALIAS, Set SFSLINE_alias:COMPANY_ID       = bopgeneral:company_id,
                          SFSLINE_alias:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                          SFSLINE_alias:LOB_SUBLINE      = "00", Generic

Access BPSDEFAULT, Set BPSDEFAULT:COMPANY_ID       = bopgeneral:company_id,
                       BPSDEFAULT:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                       BPSDEFAULT:FORM             = L_FORM, Generic

access sfsinflation, set sfsinflation:company_id       = bopgeneral:company_id,
                         sfsinflation:state            = bopgeneral:state,
                         sfsinflation:line_of_business = bopgeneral:line_of_business, generic

l_percent = 0
while sfsinflation:company_id       = bopgeneral:company_id and
      sfsinflation:state            = bopgeneral:state and
      sfsinflation:line_of_business = bopgeneral:line_of_business
        begin
        if sfpname:eff_date >= sfsinflation:eff_date then
            begin
            if sfsinflation:make_default = 1 then
                l_percent = sfsinflation:percent

            end

        next sfsinflation
        end

if sfpmaster:medical_limit < bpsdefault:medical_limit then
    begin
    change sfpmaster
        begin
        sfpmaster:medical_limit           = bpsdefault:medical_limit
        end
    end
--bopgeneral:glass_limit               = 0
If bopGENERAL:DIFFERENT_OFF_PREMISES = 0 Then
    bopGENERAL:OFF_PREMISES_LIMIT     = L_OFF_PREMISES_LIMIT
if l_percent <> 0 and
   bopgeneral:auto_percent < l_percent then
    bopgeneral:auto_percent           = l_percent
else
    bopGENERAL:AUTO_PERCENT           = BPSDEFAULT:AUTO_PERCENT
if bopgeneral:wind_deductible = 0 then
    bopGENERAL:WIND_DEDUCTIBLE            = BPSDEFAULT:WIND_DEDUCTIBLE
bopGENERAL:LOSS_INCOME_LIMIT          = BPSDEFAULT:LOSS_INCOME_LIMIT
If bopGENERAL:TENANT = "Y" Then
    bopGENERAL:LIMIT_LOSS_INCOME      = BPSDEFAULT:LIMIT_LOSS_INCOME
Else
    bopGENERAL:LIMIT_LOSS_INCOME      = "N"
If bopGENERAL:LIMIT_LOSS_INCOME = "" Then
    bopGENERAL:LIMIT_LOSS_INCOME      = "N"
bopGENERAL:DELETE_LOSS_INCOME         = "N"
bopGENERAL:SIGNS_LIMIT                = BPSDEFAULT:SIGNS_LIMIT
If SFSLINE_ALIAS:OPTION = "P" Then
    Begin
    L_EXTERIOR_SIGNS_LIMIT                  = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:EXTERIOR_SIGNS_PERCENT
                                              Divide 100))
    If L_EXTERIOR_SIGNS_LIMIT > bopGENERAL:SIGNS_LIMIT Then
        bopGENERAL:SIGNS_LIMIT        = L_EXTERIOR_SIGNS_LIMIT
    End
bopGENERAL:SIGNS_DEDUCTIBLE[1]        = BPSDEFAULT:SIGNS_DEDUCTIBLE
bopGENERAL:SIGNS_DEDUCTIBLE[2]        = BPSDEFAULT:SIGNS_NOT_ATTACHED_DEDUCT

If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM <> 3 Then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON      = BPSDEFAULT:BURGLARY_LIMIT_ON
    bopGENERAL:BURGLARY_LIMIT_OFF     = BPSDEFAULT:BURGLARY_LIMIT_OFF
    End
If L_FORM = 3 Or
   bopGENERAL:PROPERTY_LIMIT = 0 Then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON      = 0
    bopGENERAL:BURGLARY_LIMIT_OFF     = 0
    End
If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM = 3 Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON         = BPSDEFAULT:MONEY_LIMIT_ON
    bopGENERAL:MONEY_LIMIT_OFF        = BPSDEFAULT:MONEY_LIMIT_OFF
    End
If ((L_FORM <> 3 and
   bopgeneral:attach_bu5001 = "N") Or
   (bopGENERAL:PROPERTY_LIMIT = 0 and
   bopgeneral:attach_bu5001 = "N")) Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON         = 0
    bopGENERAL:MONEY_LIMIT_OFF        = 0
    End
if bpsdefault:ar_limit > bopgeneral:ar_limit then
    bopGENERAL:AR_LIMIT                   = BPSDEFAULT:AR_LIMIT
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_AR_LIMIT                              = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:AR_PERCENT Divide 100))
    If L_AR_LIMIT > bopGENERAL:AR_LIMIT Then
        bopGENERAL:AR_LIMIT           = L_AR_LIMIT
    End
if bopgeneral:bop_type = 9 and
   sfscompany:boiler_rating = 1 then
    bopgeneral:ar_limit = 0

if bpsdefault:utility_limit > bopgeneral:utility_limit then
    bopGENERAL:UTILITY_LIMIT              = BPSDEFAULT:UTILITY_LIMIT
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    Begin
    L_UTILITY_LIMIT                         = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:UTILITY_PERCENT Divide 100))
    If L_UTILITY_LIMIT > bopGENERAL:UTILITY_LIMIT Then
        bopGENERAL:UTILITY_LIMIT      = L_UTILITY_LIMIT
    If bopGENERAL:UTILITY_LIMIT > BPSDEFAULT:UTILITY_MAX and
       bpsdefault:utility_max <> 0 Then
        bopGENERAL:UTILITY_LIMIT      = BPSDEFAULT:UTILITY_MAX
    End
if bpsdefault:mechanical_limit > bopgeneral:mechanical_limit then
    bopGENERAL:MECHANICAL_LIMIT       = BPSDEFAULT:MECHANICAL_LIMIT
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    Begin
    L_MECHANICAL_LIMIT                      = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:MECHANICAL_PERCENT Divide 100))
    If L_MECHANICAL_LIMIT > bopGENERAL:MECHANICAL_LIMIT Then
        bopGENERAL:MECHANICAL_LIMIT   = L_MECHANICAL_LIMIT
    If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT:MECHANICAL_MAX and
       bpsdefault:mechanical_max <> 0 Then
        bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT:MECHANICAL_MAX
    End
bopGENERAL:CUSTOMER_PROP_LIMIT        = BPSDEFAULT:CUSTOMER_PROP_LIMIT
bopGENERAL:POLLUTION_LIMIT            = BPSDEFAULT:POLLUTION_LIMIT
bopgeneral:debris_removal_limit       = bpsdefault:debris_removal
bopGENERAL:VALUABLE_PAPERS_LIMIT      = BPSDEFAULT:VALUABLE_PAPERS_LIMIT
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_VALUABLE_LIMIT                        = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:VALUABLE_PERCENT Divide 100))
    If L_VALUABLE_LIMIT > bopGENERAL:VALUABLE_PAPERS_LIMIT Then
        bopGENERAL:VALUABLE_PAPERS_LIMIT = L_VALUABLE_LIMIT
    End
--bopGENERAL:FIRE_LIMIT                 = BPSDEFAULT:FIRE_LIMIT
bopGENERAL:BUILDING_CODE_LIMIT        = BPSDEFAULT:BUILDING_CODE_LIMIT
bopGENERAL:BUILDING_CODE_PERCENT      = BPSDEFAULT:BUILDING_CODE_PERCENT
bopGENERAL:BOILERS                    = BPSDEFAULT:BOILERS
if sfpname:eff_date >= bpsdefault1:epl_eff_date then
    begin
    if bopgeneral:class_code one of 51 and
       bopgeneral:sub_code one of 60 then
        begin
        access sfpepl, set sfpepl:policy_no    = g_policy_no,
                           sfpepl:pol_year     = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no    = g_policy_no and
           sfpepl:pol_year     = g_year and
           sfpepl:end_sequence = g_end_sequence then
            begin
            change sfpepl
                begin
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        else
            begin
            add sfpepl
                begin
                sfpepl:policy_no      = g_policy_no
                sfpepl:pol_year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        end
    else
        begin
        access sfpepl, set sfpepl:policy_no    = g_policy_no,
                           sfpepl:pol_year     = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no    <> g_policy_no or
           sfpepl:pol_year     <> g_year or
           sfpepl:end_sequence <> g_end_sequence then
            begin
            add sfpepl
                begin
                sfpepl:policy_no      = g_policy_no
                sfpepl:pol_year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = bpsdefault1:epl_limit
                sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end
/*        else
            begin
            change sfpepl
                begin
                if sfpepl:epl_limit = 0 then
                    sfpepl:epl_limit      = bpsdefault1:epl_limit
                if sfpepl:epl_deductible = 0 then
                    sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end*/
        end
    end
bopGENERAL:WATER_BACKUP_LIMITED       = "N"
If SFSLINE_alias:OPTION = "P" and
   sfscompany:boiler_rating <> 4 Then
    bopGENERAL:WATER_BACKUP_LIMITED   = "Y"
if sfsline_alias:option one of "P", "S" and
   sfscompany:boiler_rating = 4 then
    bopgeneral:water_backup_limited   = "Y"
bopGENERAL:WATER_BACKUP_EXCLUSION     = "N"
bopGENERAL:WATER_BACKUP_LIMIT         = BPSDEFAULT:WATER_BACKUP_LIMIT
if sfsline_alias:option <> "P" and
   sfscompany:boiler_rating = 2 then
    bopgeneral:water_backup_limit = 0
If SFSLINE_alias:OPTION = "P" Then
    Begin
    L_SEWER_LIMIT                           = (L_PROPERTY_LIMIT_1 *
                                              (BPSDEFAULT:SEWER_BKUP_PERCENT Divide 100))
    If L_SEWER_LIMIT > bopGENERAL:WATER_BACKUP_LIMIT Then
        bopGENERAL:WATER_BACKUP_LIMIT = L_SEWER_LIMIT
    if bopgeneral:water_backup_limit > 15000 and
       sfscompany:boiler_rating = 2 then
        bopgeneral:water_backup_limit = 15000
    End
bopGENERAL:BALIS                      = BPSDEFAULT:BALIS
bopGENERAL:SUPPLIES_LIMIT             = BPSDEFAULT:SUPPLIES_LIMIT
bopGENERAL:WHOLESALER                 = "N"
bopGENERAL:WHOLESALER_PERCENT         = 0
bopGENERAL:BURGLAR_ALARM_SYSTEM       = "N"

if bopgeneral:special_enhancement = 1 then
    begin
    Access bpssupplemental, Set bpssupplemental:COMPANY_ID       = bopgeneral:company_id,
                                bpssupplemental:state            = bopgeneral:state,
                                bpssupplemental:LINE_OF_BUSINESS = bopgeneral:line_of_business, generic

    while bpssupplemental:company_id       = bopgeneral:company_id and
          bpssupplemental:state            = bopgeneral:state and
          bpssupplemental:line_of_business = bopgeneral:line_of_business
            begin
            if sfpname:eff_date >= bpssupplemental:eff_date then
                begin
                if sfsline:option = "P" then
                    begin
                    l_ar_limit = bopgeneral:property_limit * (bpssupplemental:ar_percent divide 100)
                    if l_ar_limit > bpssupplemental:ar_limit then
                        bopgeneral:ar_limit               = l_ar_limit
                    else
                        bopGENERAL:AR_LIMIT               = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    l_utility_limit = bopgeneral:property_limit * (bpssupplemental:utility_percent divide 100)
                    if l_utility_limit > bpssupplemental:utility_limit then
                        bopgeneral:utility_limit          = l_utility_limit
                    else
                        bopGENERAL:UTILITY_LIMIT          = bpssupplemental:UTILITY_LIMIT
                    l_mechanical_limit = bopgeneral:property_limit * (bpssupplemental:mechanical_percent divide 100)
                    if l_mechanical_limit > bpssupplemental:mechanical_limit then
                        bopgeneral:mechanical_limit       = l_mechanical_limit
                    else
                        bopGENERAL:MECHANICAL_LIMIT       = bpssupplemental:MECHANICAL_LIMIT
                    If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT:MECHANICAL_MAX and
                       bpsdefault:mechanical_max <> 0 Then
                        bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT:MECHANICAL_MAX
                    l_signs_limit = bopgeneral:property_limit * (bpssupplemental:signs_percent divide 100)
                    if l_signs_limit > bpssupplemental:signs_limit then
                        bopgeneral:signs_limit            = l_signs_limit
                    else
                        bopGENERAL:SIGNS_LIMIT            = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    l_valuable_papers_limit = bopgeneral:property_limit * (bpssupplemental:valuable_papers_percent divide 100)
                    if l_valuable_papers_limit > bpssupplemental:valuable_papers_limit then
                        bopgeneral:valuable_papers_limit  = l_valuable_papers_limit
                    else
                        bopGENERAL:VALUABLE_PAPERS_LIMIT  = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
--                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    l_credit_card_limit = bopgeneral:property_limit * (bpssupplemental:credit_card_percent divide 100)
                    if l_credit_card_limit > bpssupplemental:credit_card_limit then
                        bopgeneral:credit_card_limit      = l_credit_card_limit
                    else
                        bopGENERAL:credit_card_LIMIT      = bpssupplemental:credit_card_limit
                    bopgeneral:water_backup_limited       = "Y"
                    l_water_limit = bopgeneral:property_limit * (bpssupplemental:water_backup_percent divide 100)
                    if l_water_limit > bpssupplemental:water_backup_limit then
                        bopgeneral:water_backup_limit     = l_water_limit
                    else
                        bopGENERAL:water_backup_LIMIT     = bpssupplemental:water_backup_limit
                    if bopgeneral:water_backup_limit > 15000 and
                       sfscompany:boiler_rating = 2 then
                        bopgeneral:water_backup_limit = 15000
                    end
                else
                    begin
                    bopGENERAL:AR_LIMIT                   = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
  --                bopgeneral:building_glass             = bpssupplemental:building_glass
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    bopGENERAL:UTILITY_LIMIT              = bpssupplemental:UTILITY_LIMIT
                    bopGENERAL:MECHANICAL_LIMIT           = bpssupplemental:MECHANICAL_LIMIT
                    bopGENERAL:SIGNS_LIMIT                = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    bopGENERAL:VALUABLE_PAPERS_LIMIT      = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
--                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    bopgeneral:water_backup_limited       = "Y"
                    bopgeneral:water_backup_limit         = bpssupplemental:water_backup_limit

                    end
               access sfpmaster, set sfpmaster:policY_no = g_policy_no,
                                     sfpmaster:pol_year = g_year,
                                     sfpmaster:end_sequence = g_end_sequence, generic

                change sfpmaster
                    begin
                    if sfpmaster:medical_limit < bpssupplemental:medical_limit then
                        sfpmaster:medical_limit       = bpssupplemental:medical_limit
                    sfpmaster:off_premises_limit      = bpssupplemental:off_premises_b
                    end
                 end

           next bpssupplemental
           end
    end

end

procedure change_optional_coverages
begin
if sfsline:lob_code = "CPORTFOLIO" then
    begin
    Access sfpmastsupp, Set sfpmastsupp:policy_NO        = G_policy_NO,
                            sfpmastsupp:pol_year         = g_year,
                            sfpmastsupp:end_sequence     = g_end_sequence,
                            sfpmastsupp:line_of_business = g_line_of_business, Exact

    l_form               = sfpmastsupp:form
    l_off_premises_limit = sfpmastsupp:off_premises_limit
    end
else
    begin
    Access sfpmaster, Set sfpmaster:policy_NO        = G_policy_NO,
                          sfpmaster:pol_year         = g_year,
                          sfpmaster:end_sequence     = g_end_sequence,  generic

    l_form               = sfpmaster:form
    l_off_premises_limit = sfpmaster:off_premises_limit
    end

Access SFSLINE_ALIAS, Set SFSLINE_alias:COMPANY_ID       = sfpNAME:COMPANY_ID,
                          SFSLINE_alias:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                          SFSLINE_alias:LOB_SUBLINE      = "00", Generic

Access BPSDEFAULT, Set BPSDEFAULT:COMPANY_ID = sfpNAME:COMPANY_ID,
                       BPSDEFAULT:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                       BPSDEFAULT:FORM = L_FORM, Generic

if sfpmaster:medical_limit < bpsdefault:medical_limit then
    begin
    change sfpmaster
        begin
        sfpmaster:medical_limit           = bpsdefault:medical_limit
        end
    end
If bopGENERAL:PROPERTY_LIMIT <> 0 And
   L_FORM = 3 And
   l_form_1 not one of 3 and
   bopGENERAL:MONEY_LIMIT_ON = 0 Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON = BPSDEFAULT:MONEY_LIMIT_ON
    bopGENERAL:MONEY_LIMIT_OFF = BPSDEFAULT:MONEY_LIMIT_OFF
    End
If ((L_FORM <> 3 and
   bopgeneral:attach_bu5001 = "N") Or
   (bopGENERAL:PROPERTY_LIMIT = 0 and
   bopgeneral:attach_bu5001 = "N")) Then
    Begin
    bopGENERAL:MONEY_LIMIT_ON = 0
    bopGENERAL:MONEY_LIMIT_OFF = 0
    End
If ((L_FORM = 3 and
   bopgeneral:attach_bu5001 = "N") Or
   (bopGENERAL:PROPERTY_LIMIT = 0 and
   bopgeneral:attach_bu5001 = "N")) then
    Begin
    bopGENERAL:BURGLARY_LIMIT_ON = 0
    bopGENERAL:BURGLARY_LIMIT_OFF = 0
    End
If bopGENERAL:DIFFERENT_OFF_PREMISES = 0 Then
    bopGENERAL:OFF_PREMISES_LIMIT = L_OFF_PREMISES_LIMIT
If SFSLINE_alias:OPTION = "P" And
   L_PROPERTY_LIMIT_CHANGE = "Y" Then
    Begin
    bopGENERAL:SIGNS_LIMIT = BPSDEFAULT:SIGNS_LIMIT
    L_EXTERIOR_SIGNS_LIMIT = (L_PROPERTY_LIMIT_1 *
                             (BPSDEFAULT:EXTERIOR_SIGNS_PERCENT
                             Divide 100))
    If L_EXTERIOR_SIGNS_LIMIT > bopGENERAL:SIGNS_LIMIT Then
        bopGENERAL:SIGNS_LIMIT = L_EXTERIOR_SIGNS_LIMIT

    if bpsdefault:ar_limit > bopgeneral:ar_limit then
        bopGENERAL:AR_LIMIT = BPSDEFAULT:AR_LIMIT
    L_AR_LIMIT = (L_PROPERTY_LIMIT_1 *
                (BPSDEFAULT:AR_PERCENT Divide 100))
    If L_AR_LIMIT > bopGENERAL:AR_LIMIT Then
        bopGENERAL:AR_LIMIT = L_AR_LIMIT
    if bopgeneral:bop_type = 9 and
       sfscompany:boiler_rating = 1 then
        bopgeneral:ar_limit = 0

    if bpsdefault:utility_limit > bopgeneral:utility_limit then
        bopGENERAL:UTILITY_LIMIT = BPSDEFAULT:UTILITY_LIMIT
    if sfscompany:boiler_rating <> 4 then
        begin
        L_UTILITY_LIMIT = (L_PROPERTY_LIMIT_1 *
                          (BPSDEFAULT:UTILITY_PERCENT Divide 100))
        If L_UTILITY_LIMIT > bopGENERAL:UTILITY_LIMIT Then
            bopGENERAL:UTILITY_LIMIT = L_UTILITY_LIMIT
        If bopGENERAL:UTILITY_LIMIT > BPSDEFAULT:UTILITY_MAX and
           bpsdefault:utility_max <> 0 Then
            bopGENERAL:UTILITY_LIMIT = BPSDEFAULT:UTILITY_MAX
        end

    if bpsdefault:mechanical_limit > bopgeneral:mechanical_limit then
        begin
        write("%c%s",2005,"iamhere")
        bopGENERAL:MECHANICAL_LIMIT = BPSDEFAULT:MECHANICAL_LIMIT
        end
    if sfscompany:boiler_rating <> 4 then
        begin
        L_MECHANICAL_LIMIT = (L_PROPERTY_LIMIT_1 *
                             (BPSDEFAULT:MECHANICAL_PERCENT Divide 100))
        If L_MECHANICAL_LIMIT > bopGENERAL:MECHANICAL_LIMIT Then
            bopGENERAL:MECHANICAL_LIMIT = L_MECHANICAL_LIMIT
        If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT:MECHANICAL_MAX and
           bpsdefault:mechanical_max <> 0 Then
            bopGENERAL:MECHANICAL_LIMIT = BPSDEFAULT:MECHANICAL_MAX
        end

    if bpsdefault:valuable_papers_limit > bopgeneral:valuable_papers_limit then
        bopGENERAL:VALUABLE_PAPERS_LIMIT = BPSDEFAULT:VALUABLE_PAPERS_LIMIT
    L_VALUABLE_LIMIT = (L_PROPERTY_LIMIT_1 *
                       (BPSDEFAULT:VALUABLE_PERCENT Divide 100))
    If L_VALUABLE_LIMIT > bopGENERAL:VALUABLE_PAPERS_LIMIT Then
        bopGENERAL:VALUABLE_PAPERS_LIMIT = L_VALUABLE_LIMIT

    bopGENERAL:WATER_BACKUP_LIMIT = BPSDEFAULT:WATER_BACKUP_LIMIT
    if sfsline_alias:option <> "P" and
       sfscompany:boiler_rating = 2 then
        bopgeneral:water_backup_limit = 0
    L_SEWER_LIMIT = (L_PROPERTY_LIMIT_1 *
                    (BPSDEFAULT:SEWER_BKUP_PERCENT Divide 100))
    If L_SEWER_LIMIT > bopGENERAL:WATER_BACKUP_LIMIT Then
        bopGENERAL:WATER_BACKUP_LIMIT = L_SEWER_LIMIT
    if bopgeneral:water_backup_limit > 15000 and
       sfscompany:boiler_rating = 2 then
        bopgeneral:water_backup_limit = 15000
    End
if sfpname:eff_date >= bpsdefault1:epl_eff_date then
    begin
    if bopgeneral:class_code one of 51 and
       bopgeneral:sub_code one of 60 then
        begin
        access sfpepl, set sfpepl:policy_no    = g_policy_no,
                           sfpepl:pol_year     = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no    = g_policy_no and
           sfpepl:pol_year     = g_year and
           sfpepl:end_sequence = g_end_sequence then
            begin
            change sfpepl
                begin
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        else
            begin
            add sfpepl
                begin
                sfpepl:policy_no      = g_policy_no
                sfpepl:pol_year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = 0
                sfpepl:epl_deductible = 0
                end
            end
        end
    else
        begin
        access sfpepl, set sfpepl:policy_no    = g_policy_no,
                           sfpepl:pol_year     = g_year,
                           sfpepl:end_sequence = g_end_sequence, generic

        if sfpepl:policy_no    <> g_policy_no or
           sfpepl:pol_year     <> g_year or
           sfpepl:end_sequence <> g_end_sequence then
            begin
            add sfpepl
                begin
                sfpepl:policy_no      = g_policy_no
                sfpepl:pol_Year       = g_year
                sfpepl:end_sequence   = g_end_sequence
                sfpepl:epl_limit      = bpsdefault1:epl_limit
                sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end
/*        else
            begin
            change sfpepl
                begin
                if sfpepl:epl_limit = 0 then
                    sfpepl:epl_limit      = bpsdefault1:epl_limit
                if sfpepl:epl_deductible = 0 then
                    sfpepl:epl_deductible = bpsdefault1:epl_deductible
                end
            end*/
        end
    end

if bopgeneral:special_enhancement = 1 then
    begin
    Access bpssupplemental, Set bpssupplemental:COMPANY_ID       = bopgeneral:company_id,
                                bpssupplemental:state            = bopgeneral:state,
                                bpssupplemental:LINE_OF_BUSINESS = bopgeneral:line_of_business, generic

    while bpssupplemental:company_id       = bopgeneral:company_id and
          bpssupplemental:state            = bopgeneral:state and
          bpssupplemental:line_of_business = bopgeneral:line_of_business
            begin
            if sfpname:eff_date >= bpssupplemental:eff_date then
                begin
                if sfsline:option = "P" then
                    begin
                    l_ar_limit = bopgeneral:property_limit * (bpssupplemental:ar_percent divide 100)
                    if l_ar_limit > bopgeneral:ar_limit or
                       bpssupplemental:ar_limit > bopgeneral:ar_limit then
                        begin
                        if l_ar_limit > bpssupplemental:ar_limit then
                            bopgeneral:ar_limit               = l_ar_limit
                        else
                            bopGENERAL:AR_LIMIT               = bpssupplemental:ar_limit
                        end
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    l_utility_limit = bopgeneral:property_limit * (bpssupplemental:utility_percent divide 100)
                    if l_utility_limit > bopgeneral:utility_limit or
                       bpssupplemental:utility_limit > bopgeneral:utility_limit then
                        begin
                        if l_utility_limit > bpssupplemental:utility_limit then
                            bopgeneral:utility_limit          = l_utility_limit
                        else
                            bopGENERAL:UTILITY_LIMIT          = bpssupplemental:UTILITY_LIMIT
                        end

                    l_mechanical_limit = bopgeneral:property_limit * (bpssupplemental:mechanical_percent divide 100)
                    if l_mechanical_limit > bopgeneral:mechanical_limit or
                       bpssupplemental:mechanical_limit > bopgeneral:mechanical_limit then
                        begin
                        if l_mechanical_limit > bpssupplemental:mechanical_limit then
                            bopgeneral:mechanical_limit       = l_mechanical_limit
                        else
                            bopGENERAL:MECHANICAL_LIMIT       = bpssupplemental:MECHANICAL_LIMIT
                        If bopGENERAL:MECHANICAL_LIMIT > BPSDEFAULT:MECHANICAL_MAX and
                           bpsdefault:mechanical_max <> 0 Then
                            bopGENERAL:MECHANICAL_LIMIT   = BPSDEFAULT:MECHANICAL_MAX
                        end
                    l_signs_limit = bopgeneral:property_limit * (bpssupplemental:signs_percent divide 100)
                    if l_signs_limit > bpssupplemental:signs_limit then
                        bopgeneral:signs_limit            = l_signs_limit
                    else
                        bopGENERAL:SIGNS_LIMIT            = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    l_valuable_papers_limit = bopgeneral:property_limit * (bpssupplemental:valuable_papers_percent divide 100)
                    if l_valuable_papers_limit > bopgeneral:valuable_papers_limit or
                       bpssupplemental:valuable_papers_limit > bopgeneral:valuable_papers_limit then
                        begin
                        if l_valuable_papers_limit > bpssupplemental:valuable_papers_limit then
                            bopgeneral:valuable_papers_limit  = l_valuable_papers_limit
                        else
                            bopGENERAL:VALUABLE_PAPERS_LIMIT  = bpssupplemental:VALUABLE_PAPERS_LIMIT
                        end
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
--                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    l_credit_card_limit = bopgeneral:property_limit * (bpssupplemental:credit_card_percent divide 100)
                    if l_credit_card_limit > bpssupplemental:credit_card_limit then
                        bopgeneral:credit_card_limit      = l_credit_card_limit
                    else
                        bopGENERAL:credit_card_LIMIT      = bpssupplemental:credit_card_limit
                    bopgeneral:water_backup_limited       = "Y"
                    l_water_limit = bopgeneral:property_limit * (bpssupplemental:water_backup_percent divide 100)
                    if l_water_limit > bpssupplemental:water_backup_limit then
                        bopgeneral:water_backup_limit     = l_water_limit
                    else
                        bopGENERAL:water_backup_LIMIT     = bpssupplemental:water_backup_limit
                    if bopgeneral:water_backup_limit > 15000 and
                       sfscompany:boiler_rating = 2 then
                        bopgeneral:water_backup_limit = 15000
                    end
                else
                    begin
                    bopGENERAL:AR_LIMIT                   = bpssupplemental:ar_limit
                    bopGENERAL:SUPPLIES_LIMIT             = bpssupplemental:supplies_limit
                    bopGENERAL:BUILDING_CODE_PERCENT      = bpssupplemental:BUILDING_CODE_PERCENT
    --                bopgeneral:building_glass             = bpssupplemental:building_glass
                    bopGENERAL:CUSTOMER_PROP_LIMIT        = bpssupplemental:CUSTOMER_PROP_LIMIT
                    bopGENERAL:UTILITY_LIMIT              = bpssupplemental:UTILITY_LIMIT
                    bopGENERAL:MECHANICAL_LIMIT           = bpssupplemental:MECHANICAL_LIMIT
                    bopGENERAL:SIGNS_LIMIT                = bpssupplemental:SIGNS_LIMIT
                    bopGENERAL:POLLUTION_LIMIT            = bpssupplemental:POLLUTION_LIMIT
                    bopGENERAL:VALUABLE_PAPERS_LIMIT      = bpssupplemental:VALUABLE_PAPERS_LIMIT
                    bopGENERAL:MONEY_LIMIT_ON             = bpssupplemental:MONEY_LIMIT_ON
                    bopGENERAL:MONEY_LIMIT_OFF            = bpssupplemental:MONEY_LIMIT_OFF
--                    bopGENERAL:FIRE_LIMIT                 = bpssupplemental:FIRE_LIMIT
                    bopgeneral:water_backup_limited       = "Y"
                    bopgeneral:water_backup_limit         = bpssupplemental:water_backup_limit

                    end
                access sfpmaster, set sfpmaster:policY_no = g_policy_no,
                                      sfpmaster:pol_year = g_year,
                                      sfpmaster:end_sequence = g_end_sequence, generic

                change sfpmaster
                    begin
                    if sfpmaster:medical_limit < bpssupplemental:medical_limit then
                        sfpmaster:medical_limit       = bpssupplemental:medical_limit
                    sfpmaster:off_premises_limit      = bpssupplemental:off_premises_b
                    end
                end

           next bpssupplemental
           end
    end

end

procedure update_final_rating
begin

postevent("bopmt011","reload")

end

Procedure ACCESS_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO    = G_policy_NO ,
                   sfpend:pol_year     = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO      = G_PREM_NO,
                   sfpEND:BUILD_NO     = G_BUILD_NO, Generic

L_ADD_ENDORSEMENT = "Y"
while sfpEND:policy_NO    = G_policy_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_end_sequence and
      sfpEND:PREM_NO      = G_PREM_NO and
      sfpEND:BUILD_NO     = G_BUILD_NO
    begin
    If sfpEND:CODE = L_CODE Then
        L_ADD_ENDORSEMENT = "N"

    Next sfpEND
    End

End

Procedure ACCESS_sfpEND_1
Begin
Access sfpEND, Set sfpEND:policy_NO    = G_policy_NO ,
                   sfpend:pol_year     = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO      = 0,
                   sfpEND:BUILD_NO     = 0, Generic

L_ADD_ENDORSEMENT = "Y"
while sfpEND:policy_NO    = G_policy_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_end_sequence and
      sfpEND:PREM_NO      = 0 and
      sfpEND:BUILD_NO     = 0
    begin
    If sfpEND:CODE = L_CODE Then
        L_ADD_ENDORSEMENT = "N"

    Next sfpEND
    End

End

Procedure ADD_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO    = G_policy_NO ,
                   sfpend:pol_year     = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO      = G_PREM_NO,
                   sfpEND:BUILD_NO     = G_BUILD_NO, Generic

L_SUB_CODE = 0
while sfpEND:policy_NO    = G_policy_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_End_sequence and
      sfpEND:PREM_NO      = G_PREM_NO and
      sfpEND:BUILD_NO     = G_BUILD_NO
    begin
    L_SUB_CODE = sfpEND:SUB_CODE

    Next sfpEND
    End

L_SUB_CODE = L_SUB_CODE + 10

Access bopGENERAL_ALIAS, Set bopGENERAL_ALIAS:policy_NO    = G_policy_NO,
                             bopgeneral_alias:pol_year     = g_year,
                             bopgeneral_alias:end_sequence = g_end_sequence,
                             bopGENERAL_ALIAS:PREM_NO      = G_PREM_NO,
                             bopGENERAL_ALIAS:BUILD_NO     = G_BUILD_NO, Generic

L_STATE = bopGENERAL_ALIAS:STATE
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                      SFSOPTEND:CODE = L_CODE, Generic

while SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID and
      SFSOPTEND:STATE = L_STATE and
      SFSOPTEND:LINE_OF_BUSINESS = bopgeneral:line_of_business and
      SFSOPTEND:CODE = L_CODE
    begin
    If (sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE and
       (sfpname:eff_date <= sfsoptend:exp_date or
       sfsoptend:exp_date = 0)) Then
        Begin
        L_FORM_EDITION = SFSOPTEND:FORM_EDITION
        L_DESCRIPTION = SFSOPTEND:DESCRIPTION
        l_mcp140_limit = sfsoptend:limit[1]
        End

    Next SFSOPTEND
    End

Add sfpEND
    Begin
    sfpEND:policy_NO            =       G_policy_NO
    sfpend:pol_year             =       g_year
    sfpend:end_sequence         =       g_end_sequence
    sfpEND:PREM_NO              =       G_PREM_NO
    sfpEND:BUILD_NO             =       G_BUILD_NO
    sfpEND:SUB_CODE             =       L_SUB_CODE
    sfpEND:CODE                 =       L_CODE
    sfpEND:FORM_EDITION         =       L_FORM_EDITION
    sfpEND:DESCRIPTION          =       L_DESCRIPTION
    sfpEND:PREMIUM              =       0
    sfpend:lob_end_code         =       "X"
    End

End

Procedure ADD_sfpEND_1
Begin
Access sfpEND, Set sfpEND:policy_NO    = G_policy_NO ,
                   sfpend:pol_year     = g_year,
                   sfpend:end_sequence = g_end_sequence,
                   sfpEND:PREM_NO      = 0,
                   sfpEND:BUILD_NO     = 0, Generic

L_SUB_CODE = 0
while sfpEND:policy_NO    = G_policy_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_End_sequence and
      sfpEND:PREM_NO      = 0 and
      sfpEND:BUILD_NO     = 0
    begin
    L_SUB_CODE = sfpEND:SUB_CODE

    Next sfpEND
    End

L_SUB_CODE = L_SUB_CODE + 10

Access bopGENERAL_ALIAS, Set bopGENERAL_ALIAS:policy_NO    = G_policy_NO,
                             bopgeneral_alias:pol_year     = g_year,
                             bopgeneral_alias:end_sequence = g_end_sequence,
                             bopGENERAL_ALIAS:PREM_NO      = 0,
                             bopGENERAL_ALIAS:BUILD_NO     = 0, Generic

L_STATE = bopGENERAL:STATE
Access SFSOPTEND, Set SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID,
                      SFSOPTEND:STATE = L_STATE,
                      SFSOPTEND:LINE_OF_BUSINESS = bopgeneral:line_of_business,
                      SFSOPTEND:CODE = L_CODE, Generic

while SFSOPTEND:COMPANY_ID = sfpNAME:COMPANY_ID and
      SFSOPTEND:STATE = L_STATE and
      SFSOPTEND:LINE_OF_BUSINESS = bopgeneral:line_of_business and
      SFSOPTEND:CODE = L_CODE
    begin
    If (sfpNAME:EFF_DATE >= SFSOPTEND:EFF_DATE and
       (sfpname:eff_date <= sfsoptend:exp_date or
       sfsoptend:exp_date = 0)) Then
        Begin
        L_FORM_EDITION = SFSOPTEND:FORM_EDITION
        L_DESCRIPTION = SFSOPTEND:DESCRIPTION
        l_mcp140_limit = sfsoptend:limit[1]
        End

    Next SFSOPTEND
    End

Add sfpEND
    Begin
    sfpEND:policy_NO            =       G_policy_NO
    sfpend:pol_year             =       g_year
    sfpend:end_sequence         =       g_end_sequence
    sfpEND:PREM_NO              =       0
    sfpEND:BUILD_NO             =       0
    sfpEND:SUB_CODE             =       L_SUB_CODE
    sfpEND:CODE                 =       L_CODE
    sfpEND:FORM_EDITION         =       L_FORM_EDITION
    sfpEND:DESCRIPTION          =       L_DESCRIPTION
    sfpEND:PREMIUM              =       0
    sfpend:lob_end_code         =       "X"
    End

End

Procedure DELETE_sfpEND_1
Begin
Access sfpEND, Set sfpEND:policy_NO    = G_policy_NO ,
                   sfpend:pol_year     = g_year,
                   sfpend:end_sequence = g_End_sequence,
                   sfpEND:PREM_NO      = 0,
                   sfpEND:BUILD_NO     = 0, Generic

while sfpEND:policy_NO    = G_policy_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_End_sequence and
      sfpEND:PREM_NO      = 0 and
      sfpEND:BUILD_NO     = 0
    begin
    If sfpEND:CODE = L_CODE Then
        Delete sfpEND

    Next sfpEND
    End

End

Procedure DELETE_sfpEND
Begin
Access sfpEND, Set sfpEND:policy_NO    = G_policy_NO ,
                   sfpend:pol_year     = g_year,
                   sfpend:end_sequence = g_End_sequence,
                   sfpEND:PREM_NO      = G_PREM_NO,
                   sfpEND:BUILD_NO     = G_BUILD_NO, Generic

while sfpEND:policy_NO    = G_policy_NO and
      sfpend:pol_year     = g_year and
      sfpend:end_sequence = g_End_sequence and
      sfpEND:PREM_NO      = G_PREM_NO and
      sfpEND:BUILD_NO     = G_BUILD_NO
    begin
    If sfpEND:CODE = L_CODE Then
        Delete sfpEND

    Next sfpEND
    End

End

Procedure SET_RATE_NO
Begin
Switch(bopGENERAL:BOP_TYPE)
  Case 2       :   Begin
                   bopGENERAL:RATE_NO = 9
                   bopGENERAL:RATE_GROUP = 11
                   bopGENERAL:CLASS_CODE = 51
                   End
  Case 3, 6, 7 :   Begin
                   bopGENERAL:RATE_NO = 0
                   bopGENERAL:RATE_GROUP = 1
                   bopGENERAL:CLASS_CODE = 2
                   End
  Default      :   Begin
                   bopGENERAL:RATE_NO = 0
                   bopGENERAL:RATE_GROUP = 1
                   bopGENERAL:CLASS_CODE = 75
                   End
  End

/* end of set_rate_no */
End

Procedure ADD_COMPUTER_INFO
Begin
if bopgeneral:special_enhancement = 0 then
    begin
    Add bopCOMPDESC
        Begin
        bopCOMPDESC:policy_NO               =       G_policy_NO
        bopcompdesc:pol_Year                =       g_year
        bopcompdesc:end_sequence            =       g_end_sequence
        bopCOMPDESC:PREM_NO                 =       G_PREM_NO
        bopCOMPDESC:BUILD_NO                =       G_BUILD_NO
        bopCOMPDESC:SUB_CODE                =       10
        bopCOMPDESC:HARDWARE_SOFTWARE       =       "H"
        bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC/raw
        bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT
        end

    if l_computer_limit_1 <> 0 then
        begin
        Add bopCOMPDESC
            Begin
            bopCOMPDESC:policy_NO               =       G_policy_NO
            bopcompdesc:pol_Year                =       g_year
            bopcompdesc:end_sequence            =       g_end_sequence
            bopCOMPDESC:PREM_NO                 =       G_PREM_NO
            bopCOMPDESC:BUILD_NO                =       G_BUILD_NO
            bopCOMPDESC:SUB_CODE                =       20
            bopCOMPDESC:HARDWARE_SOFTWARE       =       "S"
            bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC_1/raw
            bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT_1
            end
        end

    Add bopCOMPUTER
        Begin
        bopCOMPUTER:policy_NO               =       G_policy_NO
        bopcomputer:pol_year                =       g_year
        bopcomputer:end_sequence            =       g_end_sequence
        bopCOMPUTER:PREM_NO                 =       G_PREM_NO
        bopCOMPUTER:BUILD_NO                =       G_BUILD_NO
        bopCOMPUTER:LIMIT[1]                =       L_COMPUTER_LIMIT
        bopCOMPUTER:LIMIT[2]                =       L_COMPUTER_LIMIT_2
        bopcomputer:limit[3]                =       l_computer_limit_1
        End
    End
else
    begin
    Add bopCOMPDESC
        Begin
        bopCOMPDESC:policy_NO               =       G_policy_NO
        bopcompdesc:pol_Year                =       g_year
        bopcompdesc:end_sequence            =       g_end_sequence
        bopCOMPDESC:PREM_NO                 =       G_PREM_NO
        bopCOMPDESC:BUILD_NO                =       G_BUILD_NO
        bopCOMPDESC:SUB_CODE                =       10
        bopCOMPDESC:HARDWARE_SOFTWARE       =       "H"
        bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC/raw
        bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT
        end

    Add bopCOMPDESC
        Begin
        bopCOMPDESC:policy_NO               =       G_policy_NO
        bopcompdesc:pol_Year                =       g_year
        bopcompdesc:end_sequence            =       g_end_sequence
        bopCOMPDESC:PREM_NO                 =       G_PREM_NO
        bopCOMPDESC:BUILD_NO                =       G_BUILD_NO
        bopCOMPDESC:SUB_CODE                =       20
        bopCOMPDESC:HARDWARE_SOFTWARE       =       "S"
        bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC_1/raw
        bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT_1
        end

    Add bopCOMPUTER
        Begin
        bopCOMPUTER:policy_NO               =       G_policy_NO
        bopcomputer:pol_Year                =       g_year
        bopcomputer:end_sequence            =       g_end_sequence
        bopCOMPUTER:PREM_NO                 =       G_PREM_NO
        bopCOMPUTER:BUILD_NO                =       G_BUILD_NO
        bopCOMPUTER:LIMIT[1]                =       L_COMPUTER_LIMIT
        bopCOMPUTER:LIMIT[2]                =       l_computer_limit_2
        bopcomputer:limit[3]                =       l_computer_limit_1
        end
    End

End

Procedure CHANGE_COMPUTER_INFO
Begin
Access bopCOMPDESC, Set bopCOMPDESC:policy_NO = G_policy_NO,
                        bopcompdesc:pol_year = g_year,
                        bopcompdesc:end_sequence = g_end_sequence,
                        bopCOMPDESC:PREM_NO = G_PREM_NO,
                        bopCOMPDESC:BUILD_NO = G_BUILD_NO, Generic

Access bopCOMPUTER, Set bopCOMPUTER:policy_NO = G_policy_NO,
                        bopcomputer:pol_year = g_year,
                        bopcomputer:end_sequence = g_end_sequence,
                        bopCOMPUTER:PREM_NO = G_PREM_NO,
                        bopCOMPUTER:BUILD_NO = G_BUILD_NO, Generic

if bopgeneral:special_enhancement = 0 then
    begin
    Change bopCOMPDESC
        Begin
        if l_computer_limit < bopcomputer:limit[1] then
            begin
            bopCOMPDESC:HARDWARE_SOFTWARE       =       "H"
            bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC/raw
            bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT
            end
        End

    Change bopCOMPUTER
        Begin
        if l_computer_limit < bopcomputer:limit[1] then
            begin
            bopCOMPUTER:LIMIT[1]                =       l_computer_limit +
                                                        l_computer_limit_1
            bopCOMPUTER:LIMIT[2]                =       l_computer_limit_2
            end
        end
    end
else
    begin
    Change bopCOMPDESC
        Begin
        if l_computer_limit + l_computer_limit_1 < bopcomputer:limit[1] then
            begin
            bopCOMPDESC:HARDWARE_SOFTWARE       =       "HARDWARE"
            bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC/raw
            bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT
            end
        End

    Change bopCOMPUTER
        Begin
        if l_computer_limit + l_computer_limit_1 < bopcomputer:limit[1] then
            begin
            bopCOMPUTER:LIMIT[1]                =       L_COMPUTER_LIMIT +
                                                        l_computer_limit_1
            bopCOMPUTER:LIMIT[2]                =       L_COMPUTER_LIMIT_2
            end
        end
    end

End

Procedure CHANGE_COMPUTER_INFO_FICOF
Begin
Access bopCOMPDESC, Set bopCOMPDESC:policy_NO    = g_policy_NO,
                        bopcompdesc:pol_year     = g_year,
                        bopcompdesc:end_sequence = g_end_sequence,
                        bopCOMPDESC:PREM_NO      = g_PREM_NO,
                        bopCOMPDESC:BUILD_NO     = g_BUILD_NO, Generic

l_software = "N"
while bopcompdesc:policy_no    = g_policy_no and
      bopcompdesc:pol_year     = g_year and
      bopcompdesc:end_sequence = g_end_sequence and
      bopcompdesc:prem_no      = g_prem_no and
      bopcompdesc:build_no     = g_build_no
        begin
        l_sub_code = bopcompdesc:sub_code
        Change bopCOMPDESC
            Begin
            if l_computer_limit > bopcompdesc:limit and
               bopcompdesc:hardware_software = "H" then
                begin
                bopCOMPDESC:HARDWARE_SOFTWARE       =       "H"
                bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC/raw
                bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT
               end

            if bopcompdesc:hardware_software = "S" then
                l_software = "Y"

            if l_computer_limit_1 > bopcompdesc:limit and
               bopcompdesc:hardware_software = "S" then
                begin
                l_software = "Y"
                bopCOMPDESC:HARDWARE_SOFTWARE       =       "S"
                bopCOMPDESC:DESCRIPTION             =       L_COMPUTER_DESC_1/raw
                bopCOMPDESC:LIMIT                   =       L_COMPUTER_LIMIT_1
               end
            End

        next bopcompdesc
        end

if l_software = "N" then
    begin
    add bopcompdesc
        begin
        bopcompdesc:policy_no         = g_policy_no
        bopcompdesc:pol_year          = g_year
        bopcompdesc:end_sequence      = g_end_sequence
        bopcompdesc:prem_no           = g_prem_no
        bopcompdesc:build_no          = g_build_no
        bopcompdesc:sub_code          = l_sub_code + 10
        bopCOMPDESC:HARDWARE_SOFTWARE = "S"
        bopCOMPDESC:DESCRIPTION       = L_COMPUTER_DESC_1/raw
        bopCOMPDESC:LIMIT             = L_COMPUTER_LIMIT_1
        end
    end

Access bopCOMPUTER, Set bopCOMPUTER:policy_NO    = g_policy_NO,
                        bopcomputer:pol_year     = g_year,
                        bopcomputer:end_sequence = g_end_sequence,
                        bopCOMPUTER:PREM_NO      = g_PREM_NO,
                        bopCOMPUTER:BUILD_NO     = g_BUILD_NO, Generic

Change bopCOMPUTER
    Begin
    if l_computer_limit > bopcomputer:limit[1] then
        bopCOMPUTER:LIMIT[1]  = l_computer_limit
    if l_computer_limit_1 > bopcomputer:limit[3] then
        bopcomputer:limit[3]  = l_computer_limit_1
    if l_computer_limit_2 > bopcomputer:limit[2] then
        bopCOMPUTER:LIMIT[2]  = l_computer_limit_2
    end

End

Procedure ADD_EMPLOYEE_DIS_INFO
Begin
Add bopDISHONESTY
    Begin
    bopDISHONESTY:policy_NO             =       G_policy_NO
    bopdishonesty:pol_year              =       g_year
    bopdishonesty:end_sequence          =       g_end_sequence
    bopDISHONESTY:PREM_NO               =       G_PREM_NO
    bopDISHONESTY:BUILD_NO              =       G_BUILD_NO
    bopDISHONESTY:LIMIT                 =       L_EMPLOYEE_LIMIT
    bopDISHONESTY:DEDUCTIBLE            =       0
    End

End

Procedure ADD_EMPLOYEE_DIS_INFO_1
Begin
Add bopDISHONESTY
    Begin
    bopDISHONESTY:policy_NO             =       G_policy_NO
    bopdishonesty:pol_year              =       g_year
    bopdishonesty:end_sequence          =       g_end_sequence
    bopDISHONESTY:PREM_NO               =       0
    bopDISHONESTY:BUILD_NO              =       0
    bopDISHONESTY:LIMIT                 =       L_EMPLOYEE_LIMIT
    bopDISHONESTY:DEDUCTIBLE            =       0
    End

End

Procedure ADD_INDOOR_GLASS_INFO
Begin
Add bopGLASS
    Begin
    bopGLASS:policy_NO                  =       G_policy_NO
    bopglass:pol_year                   =       g_year
    bopglass:end_sequence               =       g_end_sequence
    bopGLASS:PREM_NO                    =       G_PREM_NO
    bopGLASS:BUILD_NO                   =       G_BUILD_NO
    bopGLASS:LIMIT                      =       L_GLASS_LIMIT
    bopGLASS:DEDUCTIBLE                 =       0
    End

End

Procedure CHANGE_INDOOR_GLASS_INFO
Begin
Access bopGLASS, Set bopGLASS:policy_NO    = G_policy_NO,
                     bopglass:pol_year     = g_year,
                     bopglass:end_sequence = g_end_sequence,
                     bopGLASS:PREM_NO      = G_PREM_NO,
                     bopGLASS:BUILD_NO     = G_BUILD_NO, Generic

if l_glass_limit > bopglass:limit then
    begin
    Change bopGLASS
        Begin
        bopGLASS:LIMIT                      =       L_GLASS_LIMIT
        bopGLASS:DEDUCTIBLE                 =       0
        end
    End

End

Procedure UPDATE_FILES
Begin
Access SFPMASTER, Set SFPMASTER:POLICY_NO = G_POLICY_NO,
                      SFPMASTER:POL_YEAR = G_YEAR,
                      SFPMASTER:END_SEQUENCE = G_END_SEQUENCE, Exact

i_trans_code = sfpmaster:trans_code

If SFPMASTER:TRANS_CODE = 12 And
   sfpmaster:amt_due_total[20] < 0 Then
    I_TRANS_CODE = 13

If SFPMASTER:TRANS_CODE = 13 And
   sfpmaster:amt_due_total[20] > 0 Then
    I_TRANS_CODE = 12


if sfsline:lob_code = "CPORTFOLIO" then
    begin
    Access sfpmastsupp, Set sfpmastsupp:policy_NO        = G_policy_NO,
                            sfpmastsupp:pol_year         = g_year,
                            sfpmastsupp:end_sequence     = g_end_sequence,
                            sfpmastsupp:line_of_business = g_line_of_business, Exact

    If SFPMASTSUPP:POLICY_NO    = G_POLICY_NO And
       SFPMASTSUPP:POL_YEAR     = G_YEAR And
       SFPMASTSUPP:END_SEQUENCE = G_END_SEQUENCE Then
        Change SFPMASTSUPP
            Begin
            SFPMASTSUPP:TOTAL[20]           = G_AMT_DUE
            SFPMASTSUPP:TOTAL[15]           = G_UNBILLED_PREMIUM
            SFPMASTSUPP:TOTAL[16]           = G_BILLED_PREMIUM
            End
    end
else
    begin
    Access sfpmaster, Set sfpmaster:policy_NO        = G_policy_NO,
                          sfpmaster:pol_year         = g_year,
                          sfpmaster:end_sequence     = g_end_sequence,  generic

    If SFPMASTER:POLICY_NO    = G_POLICY_NO And
       SFPMASTER:POL_YEAR     = G_YEAR And
       SFPMASTER:END_SEQUENCE = G_END_SEQUENCE Then
        Change SFPMASTER
            Begin
            SFPMASTER:TOTAL[20]           = G_AMT_DUE
            SFPMASTER:TOTAL[15]           = G_UNBILLED_PREMIUM
            SFPMASTER:TOTAL[16]           = G_BILLED_PREMIUM
            End
    end

Access sfpmaster, Set sfpmaster:policy_NO        = G_policy_NO,
                      sfpmaster:pol_year         = g_year,
                      sfpmaster:end_sequence     = g_end_sequence,  generic

If SFPMASTER:POLICY_NO    = G_POLICY_NO And
   SFPMASTER:POL_YEAR     = G_YEAR And
   SFPMASTER:END_SEQUENCE = G_END_SEQUENCE Then
    Change SFPMASTER
        Begin
        SFPMASTER:POLICY_UPDATED      = "Y"
        SFPMASTER:TRANS_CODE          = I_TRANS_CODE
        SFPMASTER:PREMIUM_TRANS_DATE  = TODAYSDATE
        End

L_POLICY_UPDATE_STRING = Str(G_POLICY_NO,9) + Str(G_YEAR,4) +
                         Str(G_END_SEQUENCE,4)

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli csbatch bopup011 %s",L_POLICY_UPDATE_STRING)/noconsole
Else
    Proc("cli csbatch bopup011 %s",L_POLICY_UPDATE_STRING)

Access SFPMASTER, Set SFPMASTER:POLICY_NO = G_POLICY_NO,
                      SFPMASTER:POL_YEAR = G_YEAR,
                      SFPMASTER:END_SEQUENCE = G_END_SEQUENCE, Exact

If SFPMASTER:TRANS_CODE = 11 Then
    Begin
    Do DELETE_SFPRENEWSUS

    If SFPMASTER:RENEWAL_PROCESS = "Y" Then
        Begin
        Change SFPMASTER
            Begin
            SFPMASTER:RENEWAL_PROCESS = "N"
            SFPMASTER:RENEWED = "N"
            SFPMASTER:RENEWAL_OVERRIDE = "N"
            SFPMASTER:RENEWAL_MANUAL = "N"
            End
        End

    G_COMPANY_ID = SFPNAME:COMPANY_ID
    Display Modal Screen "sfsmt118"

    L_MM = Month(TODAYSDATE)
    L_DD = Day(TODAYSDATE)
    L_YY = Year(TODAYSDATE)
    L_CANCELLATION_STRING = "1" + Str(G_POLICY_NO,9) + Str(L_MM,2) +
                            Str(L_DD,2) + Str(L_YY,4) + G_QUE
    Proc("cli csbatch arsup920 %s",L_CANCELLATION_STRING)/noconsole

    End

If SFPMASTER:TRANS_CODE = 12 Or
   SFPMASTER:TRANS_CODE = 13 Then
    Begin
    Display Modal Screen "sfpmt006"
    End

/* end of update_files */
End

Procedure DELETE_SFPRENEWSUS
Begin
Access SFPRENEWSUS, Set SFPRENEWSUS:POLICY_NO = G_POLICY_NO,
                        SFPRENEWSUS:POL_YEAR = G_YEAR, Generic

If SFPRENEWSUS:POLICY_NO = G_POLICY_NO And
   SFPRENEWSUS:POL_YEAR = G_YEAR Then
    Begin
    Delete SFPRENEWSUS
    End

End

Procedure CREATE_MACRO

Begin
Do REFRESH_WORK_FILES
L_CSEXEC_APPLICATION = "PRINT"/raw

Access SFSCSEXEC, Set SFSCSEXEC:APPLICATION = L_CSEXEC_APPLICATION , Exact

If SFSCSEXEC:APPLICATION_NUMBER = 0 Then
    Begin
    L_CSEXEC_NUMBER = 99999
    End
Else
    Begin
    L_CSEXEC_NUMBER = SFSCSEXEC:APPLICATION_NUMBER + 1

    Change SFSCSEXEC
        Begin
        SFSCSEXEC:APPLICATION_NUMBER = L_CSEXEC_NUMBER
        End
    End

L_USERNAME = USERNAME
I_REPORTA = "boppr400"
I_REPORT = "boppr400.cq"
I_REPORT_CQE = "boppr400.cqe"
I_APP = "bop"
L_app = "bop"
I_CSEXEC_NUMBER = L_CSEXEC_NUMBER
L_DEC = L_APP+Str(I_CSEXEC_NUMBER)+".cq"
L_DEC_PDF = L_APP+Str(I_CSEXEC_NUMBER)+".txt"
I_PARAMETER = I_APP+Str(I_CSEXEC_NUMBER)+".par"
I_MACROA = I_APP+Str(I_CSEXEC_NUMBER)
I_MACRO = I_APP+Str(I_CSEXEC_NUMBER)+".mf"

access sfpprint8, set sfpprint8:policy_no = g_policy_no,
                      sfpprint8:pol_year = g_Year,
                      sfpprint8:end_sequence = g_end_sequence, generic

if sfpprint8:policy_no <> g_policy_no or
   sfpprint8:pol_Year <> g_year or
   sfpprint8:end_sequence <> g_end_sequence then
    begin
    Add sfpPRINT8
        Begin
        sfpPRINT8:policy_NO = g_policy_NO
        sfpprint8:pol_Year = g_year
        sfpprint8:end_sequence = g_end_sequence
        end
    End
else
    begin
    delete sfpprint8
    Add sfpPRINT8
        Begin
        sfpPRINT8:policy_NO = g_policy_NO
        sfpprint8:pol_Year = g_year
        sfpprint8:end_sequence = g_end_sequence
        end
    End

Deletefile(I_MACRO)
Writefile(I_MACRO,"clear list<nl>")
Writefile(I_MACRO,"clear find<nl>")
Writefile(I_MACRO,"clear sum<nl>")
Writefile(I_MACRO,"run boppr400<nl>")
Writefile(I_MACRO,"cli rm boppr400.cq<nl>")
Writefile(I_MACRO,"rsave boppr400<nl>")
Writefile(I_MACRO,"cli joinit boppr400.cq %s<nl>",L_DEC)
Closefile(I_MACRO)

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Proc("cli cq %s",I_MACRO)/noconsole
Else
    Proc("cli cq %s",I_MACRO)

L_USERNAME = Trun(USERNAME)

Access SFSPROFILE, Set SFSPROFILE:USER_ID = L_USERNAME, Exact

If SFSPROFILE:USER_ID <> L_USERNAME Then
    Begin
    L_USERNAME = "default"
    Access SFSPROFILE, Set SFSPROFILE:USER_ID = L_USERNAME, Exact
    End

L_UNIX_PATH   = SFSPROFILE:UNIX_PATH/raw
L_UNIX_SERVER = SFSPROFILE:UNIX_SERVER/raw
L_CLIENT_PATH = SFSPROFILE:CLIENT_PATH/raw

If SFSCOMPANY:DEBUG_MODE = 0 Then
    Begin
    Proc("cli mv %s %s",L_DEC,L_DEC_PDF)/noconsole
    Proc("cli chmod 777 %s ",L_DEC_PDF)/noconsole
    Proc("cli rm %s",L_DEC)/noconsole
    Proc("cli mv %s %s %s", L_DEC_PDF," ",Trun(L_UNIX_PATH))/noconsole
    End
Else
    Begin
    Proc("cli mv %s %s",L_DEC,L_DEC_PDF)
    Proc("cli chmod 777 %s ",L_DEC_PDF)
    Proc("cli rm %s",L_DEC)
    Proc("cli mv %s %s %s", L_DEC_PDF," ",Trun(L_UNIX_PATH))
    End

Proc("%s %s%s",L_CLIENT_PATH,Trun(L_UNIX_SERVER),Trun(L_DEC_PDF))/client/noconsole

access sfpprint8, set sfpprint8:policy_no = g_policy_no,
                      sfpprint8:pol_year = g_Year,
                      sfpprint8:end_sequence = g_end_sequence, generic

delete sfpprint8

Do REFRESH_WORK_FILES
End

Procedure REFRESH_WORK_FILES
Begin
Proc ("cli sfpprint8.mk")/noconsole
End

End
